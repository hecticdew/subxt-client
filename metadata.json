[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": ["sp_core", "crypto", "AccountId32"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": ["frame_system", "AccountInfo"],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": ["pallet_balances", "AccountData"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": ["frame_support", "weights", "PerDispatchClass"],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": ["primitive_types", "H256"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "path": ["sp_runtime", "generic", "digest", "Digest"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": ["sp_runtime", "generic", "digest", "DigestItem"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "sequence": {
                  "type": 16
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": ["frame_system", "EventRecord"],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 139,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 140,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": ["basilisk_runtime", "Event"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "pallet_democracy::Event<Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Elections",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "orml_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "pallet_proxy::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "pallet_tips::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "pallet_collator_selection::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "pallet_preimage::Event<Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "pallet_uniques::Event<Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "pallet_asset_registry::Event<Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "XYK",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "pallet_xyk::Event<Runtime>"
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Duster",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "pallet_duster::Event<Runtime>"
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Exchange",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "pallet_exchange::Event<Runtime>"
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "LBP",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "pallet_lbp::Event<Runtime>"
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "NFT",
                      "fields": [
                        {
                          "type": 121,
                          "typeName": "pallet_nft::Event<Runtime>"
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "LiquidityMining",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "pallet_liquidity_mining::Event<Runtime>"
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "MultiTransactionPayment",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "pallet_transaction_multi_payment::Event<Runtime>"
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "PriceOracle",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "pallet_price_oracle::Event<Runtime>"
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "RelayChainInfo",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "pallet_relaychain_info::Event<Runtime>"
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "orml_currencies::Event<Runtime>"
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 133,
                          "typeName": "orml_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "OrmlXcm",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "orml_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 135,
                          "typeName": "orml_xtokens::Event<Runtime>"
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "UnknownTokens",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "orml_unknown_tokens::Event"
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 137,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "path": ["frame_system", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": ["An extrinsic completed successfully."]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 22,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": ["An extrinsic failed."]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": ["`:code` was updated."]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": ["A new account was created."]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": ["An account was reaped."]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": ["On on-chain remark happened."]
                    }
                  ]
                }
              },
              "docs": ["Event for the System pallet."]
            }
          },
          {
            "id": 19,
            "type": {
              "path": ["frame_support", "weights", "DispatchInfo"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": ["frame_support", "weights", "DispatchClass"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": ["frame_support", "weights", "Pays"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": ["sp_runtime", "DispatchError"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 23,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 24,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": ["sp_runtime", "ModuleError"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": ["sp_runtime", "TokenError"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": ["sp_runtime", "ArithmeticError"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": ["pallet_balances", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": ["An account was created with some free balance."]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": ["Transfer succeeded."]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": ["A balance was set by root."]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 27,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": ["pallet_treasury", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 0,
                      "docs": ["New proposal."]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": ["Some funds have been allocated."]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": ["A proposal was rejected; funds were slashed."]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": ["Some of our funds have been burnt."]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": ["Some funds have been deposited."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": ["pallet_utility", "pallet", "Event"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 2,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 3,
                      "docs": ["A call was dispatched."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": ["Result"],
              "params": [
                {
                  "name": "T",
                  "type": 31
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 31
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 22
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 32,
            "type": {
              "path": ["pallet_scheduler", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": ["Scheduled some task."]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": ["Canceled some task."]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 33,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 34,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": ["Dispatched some task."]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 33,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 34,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "error",
                          "type": 35,
                          "typeName": "LookupError"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Events type."]
            }
          },
          {
            "id": 33,
            "type": {
              "def": {
                "tuple": [4, 4]
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "path": ["frame_support", "traits", "schedule", "LookupError"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "BadFormat",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 36,
            "type": {
              "path": ["pallet_democracy", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "depositors",
                          "type": 37,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "index": 2,
                      "docs": ["An external proposal has been tabled."]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "threshold",
                          "type": 38,
                          "typeName": "VoteThreshold"
                        }
                      ],
                      "index": 3,
                      "docs": ["A referendum has begun."]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": ["A proposal has been approved by referendum."]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": ["A proposal has been rejected by referendum."]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 6,
                      "docs": ["A referendum has been cancelled."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 7,
                      "docs": ["A proposal has been enacted."]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": ["An external proposal has been vetoed."]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken."
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned)."
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid."
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing."
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 39,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 17,
                      "docs": ["An account has voted in a referendum"]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 18,
                      "docs": ["An account has secconded a proposal"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": ["pallet_democracy", "vote_threshold", "VoteThreshold"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "index": 0
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "index": 1
                    },
                    {
                      "name": "SimpleMajority",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": ["pallet_democracy", "vote", "AccountVote"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 40,
                          "typeName": "Vote"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": ["pallet_democracy", "vote", "Vote"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 41,
            "type": {
              "path": ["pallet_elections_phragmen", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 42,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with new_members. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "index": 2,
                      "docs": [
                        "Internal error happened while trying to perform election."
                      ]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": ["Someone has renounced their candidacy."]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was slashed by amount due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "name": "seat_holder",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A seat holder was slashed by amount by being forcefully removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "def": {
                "sequence": {
                  "type": 43
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "def": {
                "tuple": [0, 6]
              }
            }
          },
          {
            "id": 44,
            "type": {
              "path": ["pallet_collective", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 46,
            "type": {
              "path": ["pallet_collective", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": ["orml_vesting", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingScheduleAdded",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vesting_schedule",
                          "type": 48,
                          "typeName": "VestingScheduleOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": ["Added new vesting schedule."]
                    },
                    {
                      "name": "Claimed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": ["Claimed vesting."]
                    },
                    {
                      "name": "VestingSchedulesUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": ["Updated vesting schedules."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": ["orml_vesting", "VestingSchedule"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "per_period",
                      "type": 49,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": ["pallet_proxy", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 52,
                          "typeName": "u16"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": ["A proxy was added."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": ["common_runtime", "ProxyType"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "CancelProxy",
                      "index": 1
                    },
                    {
                      "name": "Governance",
                      "index": 2
                    },
                    {
                      "name": "Exchange",
                      "index": 3
                    },
                    {
                      "name": "Transfer",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": ["pallet_tips", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTip",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": ["A new tip suggestion has been opened."]
                    },
                    {
                      "name": "TipClosing",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A tip suggestion has reached threshold and is closing."
                      ]
                    },
                    {
                      "name": "TipClosed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": ["A tip suggestion has been closed."]
                    },
                    {
                      "name": "TipRetracted",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": ["A tip suggestion has been retracted."]
                    },
                    {
                      "name": "TipSlashed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "finder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": ["A tip suggestion has been slashed."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": ["pallet_collator_selection", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewInvulnerables",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NewDesiredCandidates",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "NewCandidacyBond",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "CandidateAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "CandidateRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": ["pallet_session", "pallet", "Event"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": ["pallet_preimage", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": ["A preimage has been noted."]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": ["A preimage has been requested."]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": ["A preimage has ben cleared."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": ["pallet_uniques", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": ["An asset class was created."]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": ["An asset class was force-created."]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 2,
                      "docs": ["An asset `class` was destroyed."]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": ["An asset `instance` was issued."]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": ["An asset `instance` was transferred."]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": ["An asset `instance` was destroyed."]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        }
                      ],
                      "index": 6,
                      "docs": ["Some asset `instance` was frozen."]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        }
                      ],
                      "index": 7,
                      "docs": ["Some asset `instance` was thawed."]
                    },
                    {
                      "name": "ClassFrozen",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 8,
                      "docs": ["Some asset `class` was frozen."]
                    },
                    {
                      "name": "ClassThawed",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 9,
                      "docs": ["Some asset `class` was thawed."]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "new_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 10,
                      "docs": ["The owner changed."]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": ["The management team changed."]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An `instance` of an asset `class` has been approved by the `owner` for transfer by a",
                        "`delegate`."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An approval for a `delegate` account to transfer the `instance` of an asset `class` was",
                        "cancelled by its `owner`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An asset `class` has had its attributes changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "ClassMetadataSet",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "data",
                          "type": 58,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": ["New metadata has been set for an asset class."]
                    },
                    {
                      "name": "ClassMetadataCleared",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 16,
                      "docs": ["Metadata has been cleared for an asset class."]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "data",
                          "type": 58,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "New metadata has been set for an asset instance."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 6,
                          "typeName": "T::InstanceId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Metadata has been cleared for an asset instance."
                      ]
                    },
                    {
                      "name": "Redeposited",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "successful_instances",
                          "type": 59,
                          "typeName": "Vec<T::InstanceId>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Metadata has been cleared for an asset instance."
                      ]
                    },
                    {
                      "name": "AttributeSet",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "maybe_instance",
                          "type": 60,
                          "typeName": "Option<T::InstanceId>"
                        },
                        {
                          "name": "key",
                          "type": 61,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 62,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "New attribute metadata has been set for an asset class or instance."
                      ]
                    },
                    {
                      "name": "AttributeCleared",
                      "fields": [
                        {
                          "name": "class",
                          "type": 6,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "maybe_instance",
                          "type": 60,
                          "typeName": "Option<T::InstanceId>"
                        },
                        {
                          "name": "key",
                          "type": 61,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Attribute metadata has been cleared for an asset class or instance."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 58,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "def": {
                "sequence": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "RelayChainBlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "index": 2,
                      "docs": ["The relay-chain aborted the upgrade process."]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": ["An upgrade has been authorized."]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed.",
                        "\\[ count \\]"
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 9,
                          "typeName": "relay_chain::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight.",
                        "\\[ weight_used, result_mqc_head \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": ["pallet_xcm", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 87,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 96,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 97,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "\\[ destination, result \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 66,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": ["xcm", "v2", "traits", "Outcome"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 66,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": ["xcm", "v2", "traits", "Error"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 67,
            "type": {
              "path": ["xcm", "v1", "multilocation", "MultiLocation"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 68,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": ["xcm", "v1", "multilocation", "Junctions"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        },
                        {
                          "type": 69,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "path": ["xcm", "v1", "junction", "Junction"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 71,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 71,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 71,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 73,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 74,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 75,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": ["xcm", "v0", "junction", "NetworkId"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "def": {
                "compact": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": ["xcm", "v0", "junction", "BodyId"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": ["xcm", "v0", "junction", "BodyPart"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": ["xcm", "v2", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 77,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "def": {
                "sequence": {
                  "type": 78
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": ["xcm", "v2", "Instruction"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 87,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 90,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 91,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 95,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": ["xcm", "v1", "multiasset", "MultiAssets"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 80,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "def": {
                "sequence": {
                  "type": 81
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": ["xcm", "v1", "multiasset", "MultiAsset"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 82,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 83,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": ["xcm", "v1", "multiasset", "AssetId"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": ["xcm", "v1", "multiasset", "Fungibility"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": ["xcm", "v1", "multiasset", "AssetInstance"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 86,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": ["xcm", "v2", "Response"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 89
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 89
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "def": {
                "tuple": [4, 66]
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": ["xcm", "v0", "OriginKind"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": ["xcm", "double_encoded", "DoubleEncoded"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": ["xcm", "v1", "multiasset", "MultiAssetFilter"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": ["xcm", "v1", "multiasset", "WildMultiAsset"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 94,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": ["xcm", "v1", "multiasset", "WildFungibility"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": ["xcm", "v2", "WeightLimit"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 67
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 67
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": ["xcm", "VersionedMultiAssets"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "Vec<v0::MultiAsset>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "v1::MultiAssets"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "def": {
                "sequence": {
                  "type": 99
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": ["xcm", "v0", "multi_asset", "MultiAsset"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "All",
                      "index": 1
                    },
                    {
                      "name": "AllFungible",
                      "index": 2
                    },
                    {
                      "name": "AllNonFungible",
                      "index": 3
                    },
                    {
                      "name": "AllAbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "AllAbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "AllConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "AllConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "AbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "u128"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "AbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "instance",
                          "type": 84,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "u128"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "instance",
                          "type": 84,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": ["xcm", "v0", "multi_location", "MultiLocation"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        },
                        {
                          "type": 101,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": ["xcm", "v0", "junction", "Junction"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parent",
                      "index": 0
                    },
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 71,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 71,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 71,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 73,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "u128"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "OnlyChild",
                      "index": 8
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 74,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 75,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": ["xcm", "VersionedMultiLocation"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "v0::MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "v1::MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 0,
                      "docs": ["Downward message is invalid XCM.", "\\[ id \\]"]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "[u8; 8]"
                        },
                        {
                          "type": 65,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 0,
                      "docs": ["Some XCM was executed ok."]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<T::Hash>"
                        },
                        {
                          "type": 66,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 1,
                      "docs": ["Some XCM failed."]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 2,
                      "docs": ["Bad XCM version used."]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 3,
                      "docs": ["Bad XCM format used."]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 4,
                      "docs": ["An upward message was sent to the relay chain."]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "type": 106,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "RelayBlockNumber"
                        },
                        {
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An XCM exceeded the individual message weight budget."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An XCM from the overweight queue was executed with the given actual weight used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": ["polkadot_parachain", "primitives", "Id"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 0,
                      "docs": ["Downward message is invalid XCM.", "\\[ id \\]"]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "type": 65,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached.",
                        "\\[ id, remaining, required \\]"
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward message is overweight and was placed in the overweight queue.",
                        "\\[ id, index, required \\]"
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward message from the overweight queue was executed.",
                        "\\[ index, used \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 108,
            "type": {
              "path": ["pallet_asset_registry", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Registered",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 109,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "type": 110,
                          "typeName": "AssetType<T::AssetId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Asset was registered. \\[asset_id, name, type\\]"
                      ]
                    },
                    {
                      "name": "Updated",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 109,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "type": 110,
                          "typeName": "AssetType<T::AssetId>"
                        }
                      ],
                      "index": 1,
                      "docs": ["Asset was updated. \\[asset_id, name, type\\]"]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 109,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Metadata set for an asset. \\[asset_id, symbol, decimals\\]"
                      ]
                    },
                    {
                      "name": "LocationSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 111,
                          "typeName": "T::AssetNativeLocation"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Native location set for an asset. \\[asset_id, location\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": ["pallet_asset_registry", "types", "AssetType"],
              "params": [
                {
                  "name": "AssetId",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Token",
                      "index": 0
                    },
                    {
                      "name": "PoolShare",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": ["basilisk_runtime", "AssetLocation"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 67,
                      "typeName": "polkadot_xcm::v1::MultiLocation"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": ["pallet_xyk", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LiquidityAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New liquidity was provided to the pool. [who, asset a, asset b, amount a, amount b]"
                      ]
                    },
                    {
                      "name": "LiquidityRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Liquidity was removed from the pool. [who, asset a, asset b, shares]"
                      ]
                    },
                    {
                      "name": "PoolCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Pool was created. [who, asset a, asset b, initial shares amount, share token, pool account id]"
                      ]
                    },
                    {
                      "name": "PoolDestroyed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Pool was destroyed. [who, asset a, asset b, share token, pool account id]"
                      ]
                    },
                    {
                      "name": "SellExecuted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Asset sale executed. [who, asset in, asset out, amount, sale price, fee asset, fee amount, pool account id]"
                      ]
                    },
                    {
                      "name": "BuyExecuted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Asset purchase executed. [who, asset out, asset in, amount, buy price, fee asset, fee amount]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 113,
            "type": {
              "path": ["pallet_duster", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Dusted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": ["Account dusted."]
                    },
                    {
                      "name": "Added",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": ["Account added to non-dustable list."]
                    },
                    {
                      "name": "Removed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": ["Account removed from non-dustable list."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": ["pallet_exchange", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IntentionRegistered",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 115,
                          "typeName": "IntentionType"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Intention registered event",
                        "[who, asset a, asset b, amount, intention type, intention id]"
                      ]
                    },
                    {
                      "name": "IntentionResolvedAMMTrade",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 115,
                          "typeName": "IntentionType"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Intention resolved as AMM Trade",
                        "[who, intention type, intention id, amount, amount sold/bought, pool account id]"
                      ]
                    },
                    {
                      "name": "IntentionResolvedDirectTrade",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Intention resolved as Direct Trade",
                        "[account A, account B, intention id A, intention id B, amount A, amount B]"
                      ]
                    },
                    {
                      "name": "IntentionResolvedDirectTradeFees",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Paid fees event",
                        "[who, intention id, fee receiver, asset id, fee amount]"
                      ]
                    },
                    {
                      "name": "InsufficientAssetBalanceEvent",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 115,
                          "typeName": "IntentionType"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        },
                        {
                          "type": 22,
                          "typeName": "dispatch::DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Error event - insufficient balance of specified asset",
                        "who, asset, intention type, intention id, error detail"
                      ]
                    },
                    {
                      "name": "IntentionResolveErrorEvent",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "type": 115,
                          "typeName": "IntentionType"
                        },
                        {
                          "type": 9,
                          "typeName": "IntentionId<T>"
                        },
                        {
                          "type": 22,
                          "typeName": "dispatch::DispatchError"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Intention Error Event",
                        "who, assets, sell or buy, intention id, error detail"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": ["primitives", "IntentionType"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SELL",
                      "index": 0
                    },
                    {
                      "name": "BUY",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": ["primitives", "asset", "AssetPair"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "asset_in",
                      "type": 4,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "asset_out",
                      "type": 4,
                      "typeName": "AssetId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": ["pallet_lbp", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "PoolId<T>"
                        },
                        {
                          "type": 118,
                          "typeName": "Pool<T::AccountId, T::BlockNumber>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Pool was created by the `CreatePool` origin. [pool_id, pool_data]"
                      ]
                    },
                    {
                      "name": "PoolUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "PoolId<T>"
                        },
                        {
                          "type": 118,
                          "typeName": "Pool<T::AccountId, T::BlockNumber>"
                        }
                      ],
                      "index": 1,
                      "docs": ["Pool data were updated. [pool_id, pool_data]"]
                    },
                    {
                      "name": "LiquidityAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "New liquidity was provided to the pool. [who, asset_a, asset_b, amount_a, amount_b]"
                      ]
                    },
                    {
                      "name": "LiquidityRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Liquidity was removed from the pool and the pool was destroyed. [who, asset_a, asset_b, amount_a, amount_b]"
                      ]
                    },
                    {
                      "name": "SellExecuted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Sale executed. [who, asset_in, asset_out, amount, sale_price, fee_asset, fee_amount]"
                      ]
                    },
                    {
                      "name": "BuyExecuted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Purchase executed. [who, asset_out, asset_in, amount, buy_price, fee_asset, fee_amount]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": ["pallet_lbp", "Pool"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "start",
                      "type": 119,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "end",
                      "type": 119,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "assets",
                      "type": 33,
                      "typeName": "(AssetId, AssetId)"
                    },
                    {
                      "name": "initial_weight",
                      "type": 4,
                      "typeName": "LBPWeight"
                    },
                    {
                      "name": "final_weight",
                      "type": 4,
                      "typeName": "LBPWeight"
                    },
                    {
                      "name": "weight_curve",
                      "type": 120,
                      "typeName": "WeightCurveType"
                    },
                    {
                      "name": "fee",
                      "type": 33,
                      "typeName": "(u32, u32)"
                    },
                    {
                      "name": "fee_collector",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "repay_target",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": ["pallet_lbp", "WeightCurveType"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Linear",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": ["pallet_nft", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ClassCreated",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "class_type",
                          "type": 122,
                          "typeName": "T::ClassType"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A class was created \\[owner, class_id, class_type\\]"
                      ]
                    },
                    {
                      "name": "InstanceMinted",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "instance_id",
                          "type": 6,
                          "typeName": "T::NftInstanceId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An instance was minted \\[owner, class_id, instance_id\\]"
                      ]
                    },
                    {
                      "name": "InstanceTransferred",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "instance_id",
                          "type": 6,
                          "typeName": "T::NftInstanceId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An instance was transferred \\[from, to, class_id, instance_id\\]"
                      ]
                    },
                    {
                      "name": "InstanceBurned",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "instance_id",
                          "type": 6,
                          "typeName": "T::NftInstanceId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An instance was burned \\[sender, class_id, instance_id\\]"
                      ]
                    },
                    {
                      "name": "ClassDestroyed",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        }
                      ],
                      "index": 4,
                      "docs": ["A class was destroyed \\[class_id\\]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": ["primitives", "nft", "ClassType"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Marketplace",
                      "index": 0
                    },
                    {
                      "name": "LiquidityMining",
                      "index": 1
                    },
                    {
                      "name": "Redeemable",
                      "index": 2
                    },
                    {
                      "name": "Auction",
                      "index": 3
                    },
                    {
                      "name": "HydraHeads",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": ["pallet_liquidity_mining", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FarmCreated",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "reward_currency",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "yield_per_period",
                          "type": 124,
                          "typeName": "Permill"
                        },
                        {
                          "name": "planned_yielding_periods",
                          "type": 4,
                          "typeName": "PeriodOf<T>"
                        },
                        {
                          "name": "blocks_per_period",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "incentivized_asset",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "max_reward_per_period",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0,
                      "docs": ["New farm was created."]
                    },
                    {
                      "name": "LiquidityPoolAdded",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "multiplier",
                          "type": 125,
                          "typeName": "PoolMultiplier"
                        },
                        {
                          "name": "nft_class",
                          "type": 6,
                          "typeName": "NftClassIdOf<T>"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "loyalty_curve",
                          "type": 126,
                          "typeName": "Option<LoyaltyCurve>"
                        }
                      ],
                      "index": 1,
                      "docs": ["New liq. pool was added into the farm."]
                    },
                    {
                      "name": "FarmDestroyed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": ["Farm was destroyed."]
                    },
                    {
                      "name": "SharesDeposited",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "lp_token",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "nft_class_id",
                          "type": 6,
                          "typeName": "NftClassIdOf<T>"
                        },
                        {
                          "name": "nft_instance_id",
                          "type": 6,
                          "typeName": "NftInstanceIdOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": ["New LP tokens was deposited."]
                    },
                    {
                      "name": "RewardClaimed",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "claimed",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "reward_currency",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        }
                      ],
                      "index": 4,
                      "docs": ["Rewards was claimed."]
                    },
                    {
                      "name": "SharesWithdrawn",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "lp_token",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 5,
                      "docs": ["LP tokens was withdrawn."]
                    },
                    {
                      "name": "LiquidityMiningCanceled",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        }
                      ],
                      "index": 6,
                      "docs": ["Liquidity mining for asset pair was canceled."]
                    },
                    {
                      "name": "LiquidityMiningResumed",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "multiplier",
                          "type": 125,
                          "typeName": "PoolMultiplier"
                        }
                      ],
                      "index": 7,
                      "docs": ["Liquidity mining for asset pair was resumed."]
                    },
                    {
                      "name": "LiquidityPoolRemoved",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        }
                      ],
                      "index": 8,
                      "docs": ["Liquidity pool was removed from farm."]
                    },
                    {
                      "name": "UndistributedRewardsWithdrawn",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "reward_currency",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 9,
                      "docs": ["Undistributed rewards was withdrawn from farm."]
                    },
                    {
                      "name": "LiquidityPoolUpdated",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "multiplier",
                          "type": 125,
                          "typeName": "PoolMultiplier"
                        }
                      ],
                      "index": 10,
                      "docs": ["Liquidity pool multiplier was updated."]
                    },
                    {
                      "name": "FarmAccRPZUpdated",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "accumulated_rpz",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "total_shares_z",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Farm's(`GlobalPool`) accumulated reward per share was updated."
                      ]
                    },
                    {
                      "name": "LiquidityPoolAccRPVSUpdated",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "liq_pool_farm_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "accumulated_rpvs",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "total_valued_shares",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Liquidity pool's `accumulated_rpvs` was updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 124,
            "type": {
              "path": ["sp_arithmetic", "per_things", "Permill"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": ["sp_arithmetic", "fixed_point", "FixedU128"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 127
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 127
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": ["pallet_liquidity_mining", "LoyaltyCurve"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "initial_reward_percentage",
                      "type": 125,
                      "typeName": "FixedU128"
                    },
                    {
                      "name": "scale_coef",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": ["pallet_transaction_multi_payment", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CurrencySet",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": ["CurrencySet", "[who, currency]"]
                    },
                    {
                      "name": "CurrencyAdded",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": ["New accepted currency added", "[currency]"]
                    },
                    {
                      "name": "CurrencyRemoved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": ["Accepted currency removed", "[currency]"]
                    },
                    {
                      "name": "FeeWithdrawn",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transaction fee paid in non-native currency",
                        "[Account, Currency, Native fee amount, Non-native fee amount, Destination account]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": ["pallet_price_oracle", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolRegistered",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 4,
                          "typeName": "AssetId"
                        }
                      ],
                      "index": 0,
                      "docs": ["Pool was registered. [asset a, asset b]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": ["pallet_relaychain_info", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CurrentBlockNumbers",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Current block numbers",
                        "[ Parachain block number, Relaychain Block number ]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": ["orml_currencies", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": ["Currency transfer success."]
                    },
                    {
                      "name": "BalanceUpdated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 132,
                          "typeName": "AmountOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": ["Update balance success."]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": ["Deposit success."]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": ["Withdraw success."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 132,
            "type": {
              "def": {
                "primitive": "i128"
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": ["orml_tokens", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": ["An account was created with some free balance."]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": ["Transfer succeeded."]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "RepatriatedReserve",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "status",
                          "type": 27,
                          "typeName": "BalanceStatus"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some reserved balance was repatriated (moved from reserved to",
                        "another account)."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": ["A balance was set by root."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": ["orml_xcm", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": "to",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 0,
                      "docs": ["XCM message sent. \\[to, message\\]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": ["orml_xtokens", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferredMultiAssets",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "fee",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": ["Transferred `MultiAsset` with fee."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": ["orml_unknown_tokens", "module", "Event"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": ["Deposit success."]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1,
                      "docs": ["Withdraw success."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": ["pallet_sudo", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": ["A sudo just took place. \\[result\\]"]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 138,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": ["A sudo just took place. \\[result\\]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": ["frame_system", "Phase"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "def": {
                "sequence": {
                  "type": 9
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "def": {
                "sequence": {
                  "type": 33
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": ["frame_system", "LastRuntimeUpgradeInfo"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 70,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 143,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": ["frame_system", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 145,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 146,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 5,
                      "docs": ["Set some items of storage."]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 148,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 6,
                      "docs": ["Kill some items from storage."]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": ["Make some on-chain remark and emit event."]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": ["sp_arithmetic", "per_things", "Perbill"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 146,
            "type": {
              "def": {
                "sequence": {
                  "type": 147
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "def": {
                "tuple": [10, 10]
              }
            }
          },
          {
            "id": 148,
            "type": {
              "def": {
                "sequence": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": ["frame_system", "limits", "BlockWeights"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 150,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": ["frame_support", "weights", "PerDispatchClass"],
              "params": [
                {
                  "name": "T",
                  "type": 151
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 151,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 151,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 151,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": ["frame_system", "limits", "WeightsPerClass"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 152,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 152,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 152,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": ["frame_system", "limits", "BlockLength"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 154,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": ["frame_support", "weights", "PerDispatchClass"],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "path": ["frame_support", "weights", "RuntimeDbWeight"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": ["sp_version", "RuntimeVersion"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 143,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 143,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 157,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": ["Cow"],
              "params": [
                {
                  "name": "T",
                  "type": 158
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 158
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "def": {
                "sequence": {
                  "type": 159
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "def": {
                "tuple": [85, 4]
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": ["frame_system", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Error for the System pallet"]
            }
          },
          {
            "id": 161,
            "type": {
              "path": ["pallet_timestamp", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 72,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 163
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 165,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": ["pallet_balances", "BalanceLock"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 85,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 164,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": ["pallet_balances", "Reasons"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "def": {
                "sequence": {
                  "type": 163
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 167
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 169,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "path": ["pallet_balances", "ReserveData"],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 168
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 168,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": ["primitives", "ReserveIdentifier"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Nft",
                      "index": 0
                    },
                    {
                      "name": "Marketplace",
                      "index": 1
                    },
                    {
                      "name": "Count",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "def": {
                "sequence": {
                  "type": 167
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": ["pallet_balances", "Releases"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": ["pallet_balances", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "new_free",
                          "type": 49,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "keep_alive",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 172,
            "type": {
              "path": ["pallet_balances", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": ["Vesting balance too high to send value"]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": ["Balance too low to send value"]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": ["Transfer/payment would kill account"]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": ["Beneficiary account must pre-exist"]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": ["Number of named reserves exceed MaxReserves"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": ["pallet_transaction_payment", "Releases"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "def": {
                "sequence": {
                  "type": 175
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": ["frame_support", "weights", "WeightToFeeCoefficient"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "coeff_frac",
                      "type": 145,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "negative",
                      "type": 45,
                      "typeName": "bool"
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": ["pallet_treasury", "Proposal"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 178,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": ["pallet_treasury", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 49,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 70,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 70,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 180,
            "type": {
              "path": ["frame_support", "PalletId"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 85,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": ["pallet_treasury", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": ["Proposer's balance is too low."]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": ["No proposal or bounty at that index."]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 2,
                      "docs": ["Too many approvals in the queue."]
                    }
                  ]
                }
              },
              "docs": ["Error for the treasury pallet."]
            }
          },
          {
            "id": 182,
            "type": {
              "path": ["pallet_utility", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 183,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 52,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 183,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 267,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "def": {
                "sequence": {
                  "type": 184
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": ["basilisk_runtime", "Call"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 171,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 179,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 182,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 185,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 188,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Elections",
                      "fields": [
                        {
                          "type": 190,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Elections, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 192,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 193,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 194,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 196,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "type": 198,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "type": 199,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 203,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 204,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 208,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 211,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 223,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 248,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 249,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>"
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "type": 250,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "XYK",
                      "fields": [
                        {
                          "type": 251,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XYK, Runtime>"
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Duster",
                      "fields": [
                        {
                          "type": 252,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Duster, Runtime>"
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Exchange",
                      "fields": [
                        {
                          "type": 253,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Exchange, Runtime>"
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "LBP",
                      "fields": [
                        {
                          "type": 254,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LBP, Runtime>"
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "NFT",
                      "fields": [
                        {
                          "type": 256,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NFT, Runtime>"
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "LiquidityMining",
                      "fields": [
                        {
                          "type": 257,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LiquidityMining, Runtime>"
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "MultiTransactionPayment",
                      "fields": [
                        {
                          "type": 258,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiTransactionPayment, Runtime>"
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "PriceOracle",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PriceOracle, Runtime>"
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "type": 260,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>"
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 261,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>"
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "OrmlXcm",
                      "fields": [
                        {
                          "type": 262,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>"
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 263,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>"
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 266,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": ["pallet_scheduler", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 186,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 187,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": ["Anonymously schedule a task."]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": ["Cancel an anonymously scheduled task."]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 186,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 187,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": ["Schedule a named task."]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": ["Cancel a named scheduled task."]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 186,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 187,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 186,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 187,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 186,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 33
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 33
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": ["frame_support", "traits", "schedule", "MaybeHashed"],
              "params": [
                {
                  "name": "T",
                  "type": 184
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "type": 184,
                          "typeName": "T"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": ["pallet_democracy", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "value",
                          "type": 49,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 70,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 70,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 39,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                        "  `FastTrackVotingPeriod` if too low.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 70,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 189,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 119,
                          "typeName": "Option<ReferendumIndex>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 70,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 189,
            "type": {
              "path": ["pallet_democracy", "conviction", "Conviction"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Locked1x",
                      "index": 1
                    },
                    {
                      "name": "Locked2x",
                      "index": 2
                    },
                    {
                      "name": "Locked3x",
                      "index": 3
                    },
                    {
                      "name": "Locked4x",
                      "index": 4
                    },
                    {
                      "name": "Locked5x",
                      "index": 5
                    },
                    {
                      "name": "Locked6x",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": ["pallet_elections_phragmen", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 37,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "value",
                          "type": 49,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 191,
                          "typeName": "Renouncing"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "has_replacement",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, a new phragmen election is started.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": ["pallet_elections_phragmen", "Renouncing"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "index": 0
                    },
                    {
                      "name": "RunnerUp",
                      "index": 1
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": ["pallet_collective", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 37,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 138,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 184,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 70,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 184,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 72,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": ["pallet_collective", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 37,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 138,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 184,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 70,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 184,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 72,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 194,
            "type": {
              "path": ["orml_vesting", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "index": 0
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 48,
                          "typeName": "VestingScheduleOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "update_vesting_schedules",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "vesting_schedules",
                          "type": 195,
                          "typeName": "Vec<VestingScheduleOf<T>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "claim_for",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 195,
            "type": {
              "def": {
                "sequence": {
                  "type": 48
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": ["pallet_proxy", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 197,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 52,
                          "typeName": "u16"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "index",
                          "type": 52,
                          "typeName": "u16"
                        },
                        {
                          "name": "height",
                          "type": 70,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "ext_index",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 197,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 51
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 51
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": ["pallet_tips", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_awesome",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R)` where `R` length of `reason`.",
                        "  - encoding and hashing of 'reason'",
                        "- DbReads: `Reasons`, `Tips`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "retract_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                        "",
                        "If successful, the original deposit will be unreserved.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                        "must have been reported by the signing account through `report_awesome` (and not",
                        "through `tip_new`).",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "Emits `TipRetracted` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`",
                        "  - Depends on the length of `T::Hash` which is fixed.",
                        "- DbReads: `Tips`, `origin account`",
                        "- DbWrites: `Reasons`, `Tips`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip_new",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "tip_value",
                          "type": 49,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Give a tip for something new; no finder's fee will be taken.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                        "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                        "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                        "    `T::Tippers`.",
                        "  - `O(R)`: hashing and encoding of reason of length `R`",
                        "- DbReads: `Tippers`, `Reasons`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "tip_value",
                          "type": 49,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Declare a tip value for an already-open tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                        "  account ID.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                        "has started.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                        "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                        "",
                        "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                        "  is weighted as if almost full i.e of length `T-1`.",
                        "- DbReads: `Tippers`, `Tips`",
                        "- DbWrites: `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close and payout a tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "The tip identified by `hash` must have finished its countdown period.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                        "  depends on the implementation of `T::Tippers`.",
                        "- DbReads: `Tips`, `Tippers`, `tip finder`",
                        "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "slash_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove and slash an already-open tip.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "As a result, the finder is slashed and the deposits are lost.",
                        "",
                        "Emits `TipSlashed` if successful.",
                        "",
                        "# <weight>",
                        "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                        "  The actual cost depends on the implementation of `T::Tippers`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": ["pallet_authorship", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 200,
                          "typeName": "Vec<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": ["Provide a set of uncles."]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 200,
            "type": {
              "def": {
                "sequence": {
                  "type": 201
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": ["sp_runtime", "generic", "header", "Header"],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 202
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 70,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": ["sp_runtime", "traits", "BlakeTwo256"],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": ["pallet_collator_selection", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "new",
                          "type": 37,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the list of invulnerable (fixed) collators."
                      ]
                    },
                    {
                      "name": "set_desired_candidates",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the ideal number of collators (not including the invulnerables).",
                        "If lowering this number, then the number of running collators could be higher than this figure.",
                        "Aside from that edge case, there should be no other way to have more collators than the desired number."
                      ]
                    },
                    {
                      "name": "set_candidacy_bond",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": ["Set the candidacy bond amount."]
                    },
                    {
                      "name": "register_as_candidate",
                      "index": 3,
                      "docs": [
                        "Register this account as a collator candidate. The account must (a) already have",
                        "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                        "",
                        "This call is not available to `Invulnerable` collators."
                      ]
                    },
                    {
                      "name": "leave_intent",
                      "index": 4,
                      "docs": [
                        "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                        "session change. The `CandidacyBond` will be unreserved immediately.",
                        "",
                        "This call will fail if the total number of candidates would drop below `MinCandidates`.",
                        "",
                        "This call is not available to `Invulnerable` collators."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": ["pallet_session", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 205,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": ["basilisk_runtime", "opaque", "SessionKeys"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 206,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": ["sp_consensus_aura", "sr25519", "app_sr25519", "Public"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 207,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": ["sp_core", "sr25519", "Public"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": ["pallet_preimage", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 209,
            "type": {
              "path": ["pallet_uniques", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of non-fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "`AssetDeposit` funds of sender are reserved.",
                        "",
                        "Parameters:",
                        "- `class`: The identifier of the new asset class. This must not be currently in use.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "free_holding",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of non-fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `class`: The identifier of the new asset. This must not be currently in use.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "witness",
                          "type": 210,
                          "typeName": "DestroyWitness"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a class of fungible assets.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "owner of the asset `class`.",
                        "",
                        "- `class`: The identifier of the asset class to be destroyed.",
                        "- `witness`: Information on the instances minted in the asset class. This must be",
                        "correct.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "Weight: `O(n + m)` where:",
                        "- `n = witness.instances`",
                        "- `m = witness.instance_metadatas`",
                        "- `a = witness.attributes`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint an asset instance of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `class`.",
                        "",
                        "- `class`: The class of the asset to be minted.",
                        "- `instance`: The instance value of the asset to be minted.",
                        "- `beneficiary`: The initial owner of the minted asset.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "check_owner",
                          "type": 138,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy a single asset instance.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `class`.",
                        "",
                        "- `class`: The class of the asset to be burned.",
                        "- `instance`: The instance of the asset to be burned.",
                        "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
                        "  asset is owned by this value.",
                        "",
                        "Emits `Burned` with the actual amount burned.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: `check_owner.is_some()`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move an asset from the sender account to another.",
                        "",
                        "Origin must be Signed and the signing account must be either:",
                        "- the Admin of the asset `class`;",
                        "- the Owner of the asset `instance`;",
                        "- the approved delegate for the asset `instance` (in this case, the approval is reset).",
                        "",
                        "Arguments:",
                        "- `class`: The class of the asset to be transferred.",
                        "- `instance`: The instance of the asset to be transferred.",
                        "- `dest`: The account to receive ownership of the asset.",
                        "",
                        "Emits `Transferred`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "redeposit",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instances",
                          "type": 59,
                          "typeName": "Vec<T::InstanceId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Reevaluate the deposits on some assets.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `class`.",
                        "",
                        "- `class`: The class of the asset to be frozen.",
                        "- `instances`: The instances of the asset class whose deposits will be reevaluated.",
                        "",
                        "NOTE: This exists as a best-effort function. Any asset instances which are unknown or",
                        "in the case that the owner account does not have reservable funds to pay for a",
                        "deposit increase are ignored. Generally the owner isn't going to call this on instances",
                        "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                        "so it's of little consequence.",
                        "",
                        "It will still return an error in the case that the class is unknown of the signer is",
                        "not permitted to call it.",
                        "",
                        "Weight: `O(instances.len())`"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Disallow further unprivileged transfer of an asset instance.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
                        "",
                        "- `class`: The class of the asset to be frozen.",
                        "- `instance`: The instance of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Re-allow unprivileged transfer of an asset instance.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
                        "",
                        "- `class`: The class of the asset to be thawed.",
                        "- `instance`: The instance of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_class",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Disallow further unprivileged transfers for a whole asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
                        "",
                        "- `class`: The asset class to be frozen.",
                        "",
                        "Emits `ClassFrozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_class",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Re-allow unprivileged transfers for a whole asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `class`.",
                        "",
                        "- `class`: The class to be thawed.",
                        "",
                        "Emits `ClassThawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Change the Owner of an asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `class`.",
                        "",
                        "- `class`: The asset class whose owner should be changed.",
                        "- `owner`: The new Owner of this asset class.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `class`.",
                        "",
                        "- `class`: The asset class whose team should be changed.",
                        "- `issuer`: The new Issuer of this asset class.",
                        "- `admin`: The new Admin of this asset class.",
                        "- `freezer`: The new Freezer of this asset class.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Approve an instance to be transferred by a delegated third-party account.",
                        "",
                        "Origin must be Signed and must be the owner of the asset `instance`.",
                        "",
                        "- `class`: The class of the asset to be approved for delegated transfer.",
                        "- `instance`: The instance of the asset to be approved for delegated transfer.",
                        "- `delegate`: The account to delegate permission to transfer the asset.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "maybe_check_delegate",
                          "type": 138,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Cancel the prior approval for the transfer of an asset by a delegate.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Admin of the asset `class`;",
                        "- `Signed` with the signer being the Owner of the asset `instance`;",
                        "",
                        "Arguments:",
                        "- `class`: The class of the asset of whose approval will be cancelled.",
                        "- `instance`: The instance of the asset of whose approval will be cancelled.",
                        "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
                        "  which permission of transfer is delegated.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "free_holding",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `class`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `free_holding`: Whether a deposit is taken for holding an instance of this asset",
                        "  class.",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_attribute",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "maybe_instance",
                          "type": 60,
                          "typeName": "Option<T::InstanceId>"
                        },
                        {
                          "name": "key",
                          "type": 61,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 62,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Set an attribute for an asset class or instance.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "asset `class`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `class`: The identifier of the asset class whose instance's metadata to set.",
                        "- `maybe_instance`: The identifier of the asset instance whose metadata to set.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_attribute",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "maybe_instance",
                          "type": 60,
                          "typeName": "Option<T::InstanceId>"
                        },
                        {
                          "name": "key",
                          "type": 61,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear an attribute for an asset class or instance.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "asset `class`.",
                        "",
                        "Any deposit is freed for the asset class owner.",
                        "",
                        "- `class`: The identifier of the asset class whose instance's metadata to clear.",
                        "- `maybe_instance`: The identifier of the asset instance whose metadata to clear.",
                        "- `key`: The key of the attribute.",
                        "",
                        "Emits `AttributeCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        },
                        {
                          "name": "data",
                          "type": 58,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Set the metadata for an asset instance.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "asset `class`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `class`: The identifier of the asset class whose instance's metadata to set.",
                        "- `instance`: The identifier of the asset instance whose metadata to set.",
                        "- `data`: The general information of this asset. Limited in length by `StringLimit`.",
                        "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "instance",
                          "type": 49,
                          "typeName": "T::InstanceId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Clear the metadata for an asset instance.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "asset `instance`.",
                        "",
                        "Any deposit is freed for the asset class owner.",
                        "",
                        "- `class`: The identifier of the asset class whose instance's metadata to clear.",
                        "- `instance`: The identifier of the asset instance whose metadata to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_class_metadata",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        },
                        {
                          "name": "data",
                          "type": 58,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Set the metadata for an asset class.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the asset `class`.",
                        "",
                        "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `class`: The identifier of the asset whose metadata to update.",
                        "- `data`: The general information of this asset. Limited in length by `StringLimit`.",
                        "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                        "",
                        "Emits `ClassMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_class_metadata",
                      "fields": [
                        {
                          "name": "class",
                          "type": 49,
                          "typeName": "T::ClassId"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Clear the metadata for an asset class.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the asset `class`.",
                        "",
                        "Any deposit is freed for the asset class owner.",
                        "",
                        "- `class`: The identifier of the asset class whose metadata to clear.",
                        "",
                        "Emits `ClassMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 210,
            "type": {
              "path": ["pallet_uniques", "types", "DestroyWitness"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "instances",
                      "type": 70,
                      "typeName": "u32"
                    },
                    {
                      "name": "instance_metadatas",
                      "type": 70,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 70,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 212,
                          "typeName": "ParachainInherentData"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 10,
                          "typeName": "UpwardMessage"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 213,
                      "typeName": "PersistedValidationData"
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 215,
                      "typeName": "sp_trie::StorageProof"
                    },
                    {
                      "name": "downward_messages",
                      "type": 216,
                      "typeName": "Vec<InboundDownwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 218,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": ["polkadot_primitives", "v1", "PersistedValidationData"],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 214,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "path": ["polkadot_parachain", "primitives", "HeadData"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": ["sp_trie", "storage_proof", "StorageProof"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 148,
                      "typeName": "Vec<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "def": {
                "sequence": {
                  "type": 217
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": ["polkadot_core_primitives", "InboundDownwardMessage"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 10,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 106
                },
                {
                  "name": "V",
                  "type": 219
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 221
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "def": {
                "sequence": {
                  "type": 220
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": ["polkadot_core_primitives", "InboundHrmpMessage"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "def": {
                "sequence": {
                  "type": 222
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "def": {
                "tuple": [106, 219]
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": ["pallet_xcm", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 224,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 97,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
                        "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
                        "local weights.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 97,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                        "a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
                        "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
                        "local weights.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 235,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 67,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 119,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 97,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 95,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                        "a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 97,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 95,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": ["xcm", "VersionedXcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 225,
                          "typeName": "v0::Xcm<Call>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 230,
                          "typeName": "v1::Xcm<Call>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "v2::Xcm<Call>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": ["xcm", "v0", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 229,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 90,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 91,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 225,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "def": {
                "sequence": {
                  "type": 227
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": ["xcm", "v0", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 99,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 228,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "def": {
                "sequence": {
                  "type": 225
                }
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": ["xcm", "v0", "Response"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": ["xcm", "v1", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 234,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 90,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 91,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 68,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 230,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "def": {
                "sequence": {
                  "type": 232
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": ["xcm", "v1", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 233,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "def": {
                "sequence": {
                  "type": 230
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": ["xcm", "v1", "Response"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": ["xcm", "VersionedXcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 236,
                          "typeName": "v0::Xcm<Call>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 241,
                          "typeName": "v1::Xcm<Call>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 245,
                          "typeName": "v2::Xcm<Call>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": ["xcm", "v0", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 237,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 237,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 237,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 229,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 90,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 240,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 236,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "def": {
                "sequence": {
                  "type": 238
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": ["xcm", "v0", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 226,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 99,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 239,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "def": {
                "sequence": {
                  "type": 236
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": ["xcm", "double_encoded", "DoubleEncoded"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "path": ["xcm", "v1", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 242,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 242,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 242,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 234,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 90,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 240,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 68,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 241,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 242,
            "type": {
              "def": {
                "sequence": {
                  "type": 243
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": ["xcm", "v1", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 231,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 244,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "def": {
                "sequence": {
                  "type": 241
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": ["xcm", "v2", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 246,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "def": {
                "sequence": {
                  "type": 247
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": ["xcm", "v2", "Instruction"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 87,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 90,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 72,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 240,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 70,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 70,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 79,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 76,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 67,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 81,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 95,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 245,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 245,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 79,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 72,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 72,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 249,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight message to service.",
                        "- `weight_limit`: The amount of weight that message execution may take.",
                        "",
                        "Errors:",
                        "- `Unknown`: Message of `index` is unknown.",
                        "- `OverLimit`: Message execution may use greater than `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 250,
            "type": {
              "path": ["pallet_asset_registry", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register",
                      "fields": [
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "asset_type",
                          "type": 110,
                          "typeName": "AssetType<T::AssetId>"
                        },
                        {
                          "name": "existential_deposit",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a new asset.",
                        "",
                        "Asset is identified by `name` and the name must not be used to register another asset.",
                        "",
                        "New asset is given `NextAssetId` - sequential asset id",
                        "",
                        "Adds mapping between `name` and assigned `asset_id` so asset id can be retrieved by name too (Note: this approach is used in AMM implementation (xyk))",
                        "",
                        "Emits 'Registered` event when successful."
                      ]
                    },
                    {
                      "name": "update",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "asset_type",
                          "type": 110,
                          "typeName": "AssetType<T::AssetId>"
                        },
                        {
                          "name": "existential_deposit",
                          "type": 60,
                          "typeName": "Option<T::Balance>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update registered asset.",
                        "",
                        "Updates also mapping between name and asset id if provided name is different than currently registered.",
                        "",
                        "Emits `Updated` event when successful."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "symbol",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set metadata for an asset.",
                        "",
                        "- `asset_id`: Asset identifier.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet` event when successful."
                      ]
                    },
                    {
                      "name": "set_location",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "location",
                          "type": 111,
                          "typeName": "T::AssetNativeLocation"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set asset native location.",
                        "",
                        "Adds mapping between native location and local asset id and vice versa.",
                        "",
                        "Mainly used in XCM.",
                        "",
                        "Emits `LocationSet` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 251,
            "type": {
              "path": ["pallet_xyk", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_pool",
                      "fields": [
                        {
                          "name": "asset_a",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_b",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "initial_price",
                          "type": 125,
                          "typeName": "Price"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create new pool for given asset pair.",
                        "",
                        "Registers new pool for given asset pair (`asset a` and `asset b`) in asset registry.",
                        "Asset registry creates new id or returns previously created one if such pool existed before.",
                        "",
                        "Pool is created with initial liquidity provided by `origin`.",
                        "Shares are issued with specified initial price and represents proportion of asset in the pool.",
                        "",
                        "Emits `PoolCreated` event when successful."
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "asset_a",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_b",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount_a",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "amount_b_max_limit",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add liquidity to previously created asset pair pool.",
                        "",
                        "Shares are issued with current price.",
                        "",
                        "Emits `LiquidityAdded` event when successful."
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "asset_a",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_b",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "liquidity_amount",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove liquidity from specific liquidity pool in the form of burning shares.",
                        "",
                        "If liquidity in the pool reaches 0, it is destroyed.",
                        "",
                        "Emits 'LiquidityRemoved' when successful.",
                        "Emits 'PoolDestroyed' when pool is destroyed."
                      ]
                    },
                    {
                      "name": "sell",
                      "fields": [
                        {
                          "name": "asset_in",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_out",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "max_limit",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "discount",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Trade asset in for asset out.",
                        "",
                        "Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.",
                        "",
                        "`max_limit` - minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.",
                        "",
                        "Emits `SellExecuted` when successful."
                      ]
                    },
                    {
                      "name": "buy",
                      "fields": [
                        {
                          "name": "asset_out",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_in",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "max_limit",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "discount",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Trade asset in for asset out.",
                        "",
                        "Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.",
                        "",
                        "`max_limit` - maximum amount of `asset_in` to be sold in exchange for `asset_out`.",
                        "",
                        "Emits `BuyExecuted` when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": ["pallet_duster", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "dust_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dust specified account.",
                        "IF account balance is < min. existential deposit of given currency, and account is allowed to",
                        "be dusted, the remaining balance is transferred to selected account (usually treasury).",
                        "",
                        "Caller is rewarded with chosen reward in native currency."
                      ]
                    },
                    {
                      "name": "add_nondustable_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add account to list of non-dustable account. Account whihc are excluded from udsting.",
                        "If such account should be dusted - `AccountBlacklisted` error is returned.",
                        "Only root can perform this action."
                      ]
                    },
                    {
                      "name": "remove_nondustable_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove account from list of non-dustable accounts. That means account can be dusted again."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 253,
            "type": {
              "path": ["pallet_exchange", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sell",
                      "fields": [
                        {
                          "name": "asset_sell",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_buy",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount_sell",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "min_bought",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "discount",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create sell intention",
                        "Calculate current spot price, create an intention and store in ```ExchangeAssetsIntentions```"
                      ]
                    },
                    {
                      "name": "buy",
                      "fields": [
                        {
                          "name": "asset_buy",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_sell",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount_buy",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "max_sold",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "discount",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Create buy intention",
                        "Calculate current spot price, create an intention and store in ```ExchangeAssetsIntentions```"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 254,
            "type": {
              "path": ["pallet_lbp", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_pool",
                      "fields": [
                        {
                          "name": "pool_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_a",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_a_amount",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "asset_b",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_b_amount",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "initial_weight",
                          "type": 4,
                          "typeName": "LBPWeight"
                        },
                        {
                          "name": "final_weight",
                          "type": 4,
                          "typeName": "LBPWeight"
                        },
                        {
                          "name": "weight_curve",
                          "type": 120,
                          "typeName": "WeightCurveType"
                        },
                        {
                          "name": "fee",
                          "type": 33,
                          "typeName": "(u32, u32)"
                        },
                        {
                          "name": "fee_collector",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "repay_target",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new liquidity bootstrapping pool for given asset pair.",
                        "",
                        "For any asset pair, only one pool can exist at a time.",
                        "",
                        "The dispatch origin for this call must be `T::CreatePoolOrigin`.",
                        "The pool is created with initial liquidity provided by the `pool_owner` who must have",
                        "sufficient funds free.",
                        "",
                        "The pool starts uninitialized and update_pool call should be called once created to set the start block.",
                        "",
                        "This function should be dispatched from governing entity `T::CreatePoolOrigin`",
                        "",
                        "Parameters:",
                        "- `pool_owner`: the future owner of the new pool.",
                        "- `asset_a`: { asset_id, amount } Asset ID and initial liquidity amount.",
                        "- `asset_b`: { asset_id, amount } Asset ID and initial liquidity amount.",
                        "- `initial_weight`: Initial weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%",
                        "this should be higher than final weight",
                        "- `final_weight`: Final weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%",
                        "this should be lower than initial weight",
                        "- `weight_curve`: The weight function used to update the LBP weights. Currently,",
                        "there is only one weight function implemented, the linear function.",
                        "- `fee`: The trading fee charged on every trade distributed to `fee_collector`.",
                        "- `fee_collector`: The account to which trading fees will be transferred.",
                        "- `repay_target`: The amount of tokens to repay to separate fee_collector account. Until this amount is",
                        "reached, fee will be increased to 20% and taken from the pool",
                        "",
                        "Emits `PoolCreated` event when successful.",
                        "",
                        "BEWARE: We are taking the fee from the accumulated asset. If the accumulated asset is sold to the pool,",
                        "the fee cost is transferred to the pool. If its bought from the pool the buyer bears the cost.",
                        "This increases the price of the sold asset on every trade. Make sure to only run this with",
                        "previously illiquid assets."
                      ]
                    },
                    {
                      "name": "update_pool_data",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 0,
                          "typeName": "PoolId<T>"
                        },
                        {
                          "name": "pool_owner",
                          "type": 138,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "start",
                          "type": 119,
                          "typeName": "Option<T::BlockNumber>"
                        },
                        {
                          "name": "end",
                          "type": 119,
                          "typeName": "Option<T::BlockNumber>"
                        },
                        {
                          "name": "initial_weight",
                          "type": 119,
                          "typeName": "Option<LBPWeight>"
                        },
                        {
                          "name": "final_weight",
                          "type": 119,
                          "typeName": "Option<LBPWeight>"
                        },
                        {
                          "name": "fee",
                          "type": 186,
                          "typeName": "Option<(u32, u32)>"
                        },
                        {
                          "name": "fee_collector",
                          "type": 138,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "repay_target",
                          "type": 60,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update pool data of a pool.",
                        "",
                        "The dispatch origin for this call must be signed by the pool owner.",
                        "",
                        "The pool can be updated only if the sale has not already started.",
                        "",
                        "At least one of the following optional parameters has to be specified.",
                        "",
                        "Parameters:",
                        "- `pool_id`: The identifier of the pool to be updated.",
                        "- `start`: The new starting time of the sale. This parameter is optional.",
                        "- `end`: The new ending time of the sale. This parameter is optional.",
                        "- `initial_weight`: The new initial weight. This parameter is optional.",
                        "- `final_weight`: The new final weight. This parameter is optional.",
                        "- `fee`: The new trading fee charged on every trade. This parameter is optional.",
                        "- `fee_collector`: The new receiver of trading fees. This parameter is optional.",
                        "",
                        "Emits `PoolUpdated` event when successful."
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "amount_a",
                          "type": 255,
                          "typeName": "(AssetId, BalanceOf<T>)"
                        },
                        {
                          "name": "amount_b",
                          "type": 255,
                          "typeName": "(AssetId, BalanceOf<T>)"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add liquidity to a pool.",
                        "",
                        "Assets to add has to match the pool assets. At least one amount has to be non-zero.",
                        "",
                        "The dispatch origin for this call must be signed by the pool owner.",
                        "",
                        "Parameters:",
                        "- `pool_id`: The identifier of the pool",
                        "- `amount_a`: The identifier of the asset and the amount to add.",
                        "- `amount_b`: The identifier of the second asset and the amount to add.",
                        "",
                        "Emits `LiquidityAdded` event when successful."
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 0,
                          "typeName": "PoolId<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer all the liquidity from a pool back to the pool owner and destroy the pool.",
                        "The pool data are also removed from the storage.",
                        "",
                        "The pool can't be destroyed during the sale.",
                        "",
                        "The dispatch origin for this call must be signed by the pool owner.",
                        "",
                        "Parameters:",
                        "- `amount_a`: The identifier of the asset and the amount to add.",
                        "",
                        "Emits 'LiquidityRemoved' when successful."
                      ]
                    },
                    {
                      "name": "sell",
                      "fields": [
                        {
                          "name": "asset_in",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_out",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "max_limit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Trade `asset_in` for `asset_out`.",
                        "",
                        "Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is",
                        "affected by the amount and proportion of the pool assets and the weights.",
                        "",
                        "Trading `fee` is distributed to the `fee_collector`.",
                        "",
                        "Parameters:",
                        "- `asset_in`: The identifier of the asset being transferred from the account to the pool.",
                        "- `asset_out`: The identifier of the asset being transferred from the pool to the account.",
                        "- `amount`: The amount of `asset_in`",
                        "- `max_limit`: minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.",
                        "",
                        "Emits `SellExecuted` when successful."
                      ]
                    },
                    {
                      "name": "buy",
                      "fields": [
                        {
                          "name": "asset_out",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_in",
                          "type": 4,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "max_limit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Trade `asset_in` for `asset_out`.",
                        "",
                        "Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is",
                        "affected by the amount and the proportion of the pool assets and the weights.",
                        "",
                        "Trading `fee` is distributed to the `fee_collector`.",
                        "",
                        "Parameters:",
                        "- `asset_in`: The identifier of the asset being transferred from the account to the pool.",
                        "- `asset_out`: The identifier of the asset being transferred from the pool to the account.",
                        "- `amount`: The amount of `asset_out`.",
                        "- `max_limit`: maximum amount of `asset_in` to be sold in exchange for `asset_out`.",
                        "",
                        "Emits `BuyExecuted` when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 255,
            "type": {
              "def": {
                "tuple": [4, 6]
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": ["pallet_nft", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_class",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "class_type",
                          "type": 122,
                          "typeName": "T::ClassType"
                        },
                        {
                          "name": "metadata",
                          "type": 58,
                          "typeName": "BoundedVecOfUnq<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Creates an NFT class of the given class",
                        "and sets its metadata",
                        "",
                        "Parameters:",
                        "- `class_id`: Identifier of a class",
                        "- `class_type`: The class type determines its purpose and usage",
                        "- `metadata`: Arbitrary data about a class, e.g. IPFS hash or name",
                        "",
                        "Emits ClassCreated event"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "instance_id",
                          "type": 6,
                          "typeName": "T::NftInstanceId"
                        },
                        {
                          "name": "metadata",
                          "type": 58,
                          "typeName": "BoundedVecOfUnq<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Mints an NFT in the specified class",
                        "and sets its metadata",
                        "",
                        "Parameters:",
                        "- `class_id`: The class of the asset to be minted.",
                        "- `instance_id`: The class of the asset to be minted.",
                        "- `metadata`: Arbitrary data about an instance, e.g. IPFS hash or symbol"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "instance_id",
                          "type": 6,
                          "typeName": "T::NftInstanceId"
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfers NFT from account A to account B",
                        "Only the ProtocolOrigin can send NFT to another account",
                        "This is to prevent creating deposit burden for others",
                        "",
                        "Parameters:",
                        "- `class_id`: The class of the asset to be transferred.",
                        "- `instance_id`: The instance of the asset to be transferred.",
                        "- `dest`: The account to receive ownership of the asset."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        },
                        {
                          "name": "instance_id",
                          "type": 6,
                          "typeName": "T::NftInstanceId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Removes a token from existence",
                        "",
                        "Parameters:",
                        "- `class_id`: The class of the asset to be burned.",
                        "- `instance_id`: The instance of the asset to be burned."
                      ]
                    },
                    {
                      "name": "destroy_class",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 6,
                          "typeName": "T::NftClassId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Removes a class from existence",
                        "",
                        "Parameters:",
                        "- `class_id`: The identifier of the asset class to be destroyed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 257,
            "type": {
              "path": ["pallet_liquidity_mining", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_farm",
                      "fields": [
                        {
                          "name": "total_rewards",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "planned_yielding_periods",
                          "type": 4,
                          "typeName": "PeriodOf<T>"
                        },
                        {
                          "name": "blocks_per_period",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "incentivized_asset",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "reward_currency",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "yield_per_period",
                          "type": 124,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create new liquidity mining program with proved parameters.",
                        "",
                        "`owner` account have to have at least `total_rewards` balance. This fund will be",
                        "transferred from `owner` to farm account.",
                        "",
                        "The dispatch origin for this call must be `T::CreateOrigin`.",
                        "",
                        "Parameters:",
                        "- `origin`: account allowed to create new liq. mining program.",
                        "- `total_rewards`: total rewards planned to distribute. This rewards will be",
                        "distributed between all liq. pools in liq. mining program.",
                        "- `planned_yielding_periods`: planned number of periods to distribute `total_rewards`.",
                        "WARN: THIS IS NOT HARD DEADLINE. Not all rewards have to be distributed in",
                        "`planned_yielding_periods`. Rewards are distributed based on the situation in the liq.",
                        "pools and can be distributed in a longer time frame but never in the shorter time frame.",
                        "- `blocks_per_period`:  number of blocks in a single period. Min. number of blocks per",
                        "period is 1.",
                        "- `incentivized_asset`: asset to be incentivized in AMM pools. All liq. pools added into",
                        "liq. mining program have to have `incentivized_asset` in their pair.",
                        "- `reward_currency`: payoff currency of rewards.",
                        "- `owner`: liq. mining farm owner.",
                        "- `yield_per_period`: percentage return on `reward_currency` of all pools p.a.",
                        "",
                        "Emits `FarmCreated` event when successful."
                      ]
                    },
                    {
                      "name": "destroy_farm",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Destroy existing liq. mining program.",
                        "",
                        "Only farm owner can perform this action.",
                        "",
                        "WARN: To successfully destroy a farm, farm have to be empty(all liq. pools have to be",
                        "removed from the farm) and all undistributed rewards have to be withdrawn.",
                        "",
                        "Parameters:",
                        "- `farm_id`: id of farm to be destroyed.",
                        "",
                        "Emits `FarmDestroyed` event when successful."
                      ]
                    },
                    {
                      "name": "withdraw_undistributed_rewards",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer all rewards left to distribute from farm account to farm's `owner` account.",
                        " ",
                        "Only farm owner can perform this action.",
                        "",
                        "WARN: Farm have to be empty(all liq. pools have to be removed for the farm) to",
                        "successfully withdraw rewards left to distribute from the farm.",
                        "",
                        "Parameters:",
                        "- `farm_id`: id of farm to be destroyed.",
                        "",
                        "Emits `UndistributedRewardsWithdrawn` event when successful."
                      ]
                    },
                    {
                      "name": "add_liquidity_pool",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "multiplier",
                          "type": 125,
                          "typeName": "PoolMultiplier"
                        },
                        {
                          "name": "loyalty_curve",
                          "type": 126,
                          "typeName": "Option<LoyaltyCurve>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add liquidity pool to farm and allow yield farming for given `asset_pair` amm.",
                        " ",
                        "Only farm owner can perform this action.",
                        "",
                        "Only AMMs with `asset_pair` with `incentivized_asset` can be added into the farm. AMM",
                        "for `asset_pair` has to exist to successfully add liq. pool to the farm. Same AMM can",
                        "in the same farm only once.",
                        "",
                        "Parameters:",
                        "- `farm_id`: farm id to which a liq. pool will be added.",
                        "- `asset_pair`: asset pair identifying liq. pool. Liq. mining will be allowed for this",
                        "`asset_pair` and one of the assets in the pair must be `incentivized_asset`.",
                        "- `multiplier`: liq. pool multiplier in the farm.",
                        "- `loyalty_curve`: curve to calculate loyalty multiplier to distribute rewards to users",
                        "with time incentive. `None` means no loyalty multiplier.",
                        "",
                        "Emits `LiquidityPoolAdded` event when successful."
                      ]
                    },
                    {
                      "name": "update_liquidity_pool",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "multiplier",
                          "type": 125,
                          "typeName": "PoolMultiplier"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update liquidity pool multiplier.",
                        " ",
                        "Only farm owner can perform this action.",
                        "",
                        "Parameters:",
                        "- `farm_id`: farm id in which liq. pool will be updated.",
                        "- `asset_pair`: asset pair identifying liq. pool in farm.",
                        "- `multiplier`: new liq. pool multiplier in the farm.",
                        "",
                        "Emits `LiquidityPoolUpdated` event when successful."
                      ]
                    },
                    {
                      "name": "cancel_liquidity_pool",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel liq. miming for specific liq. pool.",
                        "",
                        "This function claims rewards from `GlobalPool` last time and stops liq. pool",
                        "incentivization from a `GlobalPool`. Users will be able to only withdraw",
                        "shares(with claiming) after calling this function.",
                        "`deposit_shares()` and `claim_rewards()` are not allowed on canceled liq. pool.",
                        " ",
                        "Only farm owner can perform this action.",
                        "",
                        "Parameters:",
                        "- `farm_id`: farm id in which liq. pool will be canceled.",
                        "- `asset_pair`: asset pair identifying liq. pool in the farm.",
                        "",
                        "Emits `LiquidityMiningCanceled` event when successful."
                      ]
                    },
                    {
                      "name": "resume_liquidity_pool",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "multiplier",
                          "type": 125,
                          "typeName": "PoolMultiplier"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Resume liq. miming for canceled liq. pool.",
                        "",
                        "This function resume incentivization from `GlobalPool` and restore full functionality",
                        "for liq. pool. Users will be able to deposit, claim and withdraw again.",
                        "",
                        "WARN: Liq. pool is NOT rewarded for time it was canceled.",
                        "",
                        "Only farm owner can perform this action.",
                        "",
                        "Parameters:",
                        "- `farm_id`: farm id in which liq. pool will be resumed.",
                        "- `asset_pair`: asset pair identifying liq. pool in the farm.",
                        "- `multiplier`: liq. pool multiplier in the farm.",
                        "",
                        "Emits `LiquidityMiningResumed` event when successful."
                      ]
                    },
                    {
                      "name": "remove_liquidity_pool",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove liq. pool for a farm.",
                        "",
                        "This function remove liq. pool from the farm and also from storage. Users will be able to",
                        "only withdraw shares(without claiming rewards from liq. mining). Unpaid rewards will be",
                        "transferred back to farm(`GlobalPool`) account and will be used to distribute to other",
                        "liq. pools in the farm.",
                        "",
                        "Liq. pool must be canceled before calling this function.",
                        "",
                        "Only farm owner can perform this action.",
                        "",
                        "Parameters:",
                        "- `farm_id`: farm id from which liq. pool should be removed.",
                        "- `asset_pair`: asset pair identifying liq. pool in the farm.",
                        "",
                        "Emits `LiquidityPoolRemoved` event when successful."
                      ]
                    },
                    {
                      "name": "deposit_shares",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "GlobalPoolId"
                        },
                        {
                          "name": "asset_pair",
                          "type": 116,
                          "typeName": "AssetPair"
                        },
                        {
                          "name": "shares_amount",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Deposit LP shares to a liq. mining.",
                        "",
                        "This function transfer LP shares from `origin` to pallet's account and mint nft for",
                        "`origin` account. Minted nft represent deposit in the liq. mining.",
                        "",
                        "Parameters:",
                        "- `origin`: account depositing LP shares. This account have to have at least",
                        "`shares_amount` of LP shares.",
                        "- `farm_id`: id of farm to which user want to deposit LP shares.",
                        "- `asset_pair`: asset pair identifying LP shares user want to deposit.",
                        "- `shares_amount`: amount of LP shares user want to deposit.",
                        "",
                        "Emits `SharesDeposited` event when successful."
                      ]
                    },
                    {
                      "name": "claim_rewards",
                      "fields": [
                        {
                          "name": "nft_id",
                          "type": 6,
                          "typeName": "NftInstanceIdOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Claim rewards from liq. mining for deposit represented by `nft_id`.",
                        "",
                        "This function calculate user rewards from liq. mining and transfer rewards to `origin`",
                        "account. Claiming in the same period is allowed only once.",
                        "",
                        "WARN: User have to use `withdraw_shares()` if liq. pool is canceled, removed or whole",
                        "farm is destroyed.",
                        "",
                        "Parameters:",
                        "- `origin`: account owner of deposit(nft).",
                        "- `nft_id`: nft id representing deposit in the liq. pool.",
                        "",
                        "Emits `RewardClaimed` event when successful."
                      ]
                    },
                    {
                      "name": "withdraw_shares",
                      "fields": [
                        {
                          "name": "nft_id",
                          "type": 6,
                          "typeName": "NftInstanceIdOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Withdraw LP shares from liq. mining. with reward claiming if possible.",
                        "",
                        "Cases for transfer LP shares and claimed rewards:",
                        "",
                        "* liq. mining is active(liq. pool is not canceled) - claim and transfer rewards(if it",
                        "wasn't claimed in this period) and transfer LP shares.",
                        "* liq. mining is canceled - claim and transfer rewards(if it",
                        "wasn't claimed in this period) and transfer LP shares.",
                        "* liq. pool was removed - only LP shares will be transferred.",
                        "* farm was destroyed - only LP shares will be transferred.",
                        "* SPECIAL CASE: AMM pool does not exist - claiming based on liq. pool/farm state, LP",
                        "shares will not be transfered.",
                        "",
                        "This function transfer user's unclaimable rewards back to global pool's account.",
                        "",
                        "Parameters:",
                        "- `origin`: account owner of deposit(nft).",
                        "- `nft_id`: nft id representing deposit in the liq. pool.",
                        "",
                        "Emits:",
                        "* `RewardClaimed` if claim happen",
                        "* `SharesWithdrawn` event when successful"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 258,
            "type": {
              "path": ["pallet_transaction_multi_payment", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_currency",
                      "fields": [
                        {
                          "name": "currency",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set selected currency for given account.",
                        "",
                        "This allows to set a currency for an account in which all transaction fees will be paid.",
                        "Account balance cannot be zero.",
                        "",
                        "Chosen currency must be in the list of accepted currencies.",
                        "",
                        "When currency is set, fixed fee is withdrawn from the account to pay for the currency change",
                        "",
                        "Emits `CurrencySet` event when successful."
                      ]
                    },
                    {
                      "name": "add_currency",
                      "fields": [
                        {
                          "name": "currency",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "price",
                          "type": 125,
                          "typeName": "Price"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add a currency to the list of accepted currencies.",
                        "",
                        "Only member can perform this action.",
                        "",
                        "Currency must not be already accepted. Core asset id cannot be explicitly added.",
                        "",
                        "Emits `CurrencyAdded` event when successful."
                      ]
                    },
                    {
                      "name": "remove_currency",
                      "fields": [
                        {
                          "name": "currency",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove currency from the list of supported currencies",
                        "Only selected members can perform this action",
                        "",
                        "Core asset cannot be removed.",
                        "",
                        "Emits `CurrencyRemoved` when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 259,
            "type": {
              "path": ["pallet_price_oracle", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": ["orml_currencies", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some balance to another account under `currency_id`.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "transfer_native_currency",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer some native currency to another account.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "update_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 132,
                          "typeName": "AmountOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "update amount of account `who` under `currency_id`.",
                        "",
                        "The dispatch origin of this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 261,
            "type": {
              "path": ["orml_tokens", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the",
                        "`TransferFee`. If the sender's account is below the existential",
                        "deposit as a result of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer all remaining balance to the given account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_",
                        "balances. This means that any locked, reserved, or existential",
                        "deposits (when `keep_alive` is `true`), will not be transferred by",
                        "this function. To ensure that this function results in a killed",
                        "account, you might need to prepare the account by removing any",
                        "reference counters, storage deposits, etc...",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all`",
                        "  operation should send all of the funds the account has, causing",
                        "  the sender account to be killed (false), or transfer everything",
                        "  except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer",
                        "will not kill the origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source",
                        "account may be specified.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The sender of the transfer.",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "new_free",
                          "type": 49,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 49,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
                        "will also decrease the total issuance of the system",
                        "(`TotalIssuance`). If the new free or reserved balance is below the",
                        "existential deposit, it will reap the `AccountInfo`.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 262,
            "type": {
              "path": ["orml_xcm", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send_as_sovereign",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 224,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0,
                      "docs": ["Send an XCM message as parachain sovereign."]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 263,
            "type": {
              "path": ["orml_xtokens", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer native currencies.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 264,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer `MultiAsset`.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_with_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 4,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer native currencies specifying the fee and amount as",
                        "separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the amount to be spent to pay for execution in destination",
                        "chain. Both fee and amount will be subtracted form the callers",
                        "balance.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset_with_fee",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 264,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "fee",
                          "type": 264,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer `MultiAsset` specifying the fee and amount as separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the multiasset to be spent to pay for execution in",
                        "destination chain. Both fee and amount will be subtracted form the",
                        "callers balance For now we only accept fee and asset having the same",
                        "`MultiLocation` id.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multicurrencies",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 265,
                          "typeName": "Vec<(T::CurrencyId, T::Balance)>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer several currencies specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the currencies tuple that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiassets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 97,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 102,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transfer several `MultiAsset` specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the MultiAssets that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 264,
            "type": {
              "path": ["xcm", "VersionedMultiAsset"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "v0::MultiAsset"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 81,
                          "typeName": "v1::MultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 265,
            "type": {
              "def": {
                "sequence": {
                  "type": 255
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": ["pallet_sudo", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "call",
                          "type": 184,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 267,
            "type": {
              "path": ["basilisk_runtime", "OriginCaller"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 268,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 269,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 270,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 272,
                          "typeName": "cumulus_pallet_xcm::Origin"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 273,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": ["frame_support", "dispatch", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": ["pallet_collective", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": ["pallet_collective", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": ["pallet_xcm", "pallet", "Origin"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Origin"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "index": 0
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "type": 106,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": ["sp_core", "Void"],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": ["pallet_utility", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": ["Too many calls batched."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 275,
            "type": {
              "def": {
                "sequence": {
                  "type": 276
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 277
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 277
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": ["pallet_scheduler", "ScheduledV3"],
              "params": [
                {
                  "name": "Call",
                  "type": 187
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 267
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 34,
                      "typeName": "Option<Vec<u8>>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 187,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 186,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 267,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": ["pallet_scheduler", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": ["Failed to schedule a call"]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": ["Cannot find the scheduled call."]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": ["Given target block number is in the past."]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 279,
            "type": {
              "def": {
                "sequence": {
                  "type": 280
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "def": {
                "tuple": [4, 9, 0]
              }
            }
          },
          {
            "id": 281,
            "type": {
              "def": {
                "tuple": [37, 6]
              }
            }
          },
          {
            "id": 282,
            "type": {
              "path": ["pallet_democracy", "PreimageStatus"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber"
                        },
                        {
                          "name": "expiry",
                          "type": 119,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": ["pallet_democracy", "types", "ReferendumInfo"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 284,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 45,
                          "typeName": "bool"
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": ["pallet_democracy", "types", "ReferendumStatus"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "threshold",
                      "type": 38,
                      "typeName": "VoteThreshold"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "tally",
                      "type": 285,
                      "typeName": "Tally<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": ["pallet_democracy", "types", "Tally"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": ["pallet_democracy", "vote", "Voting"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 287,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>"
                        },
                        {
                          "name": "delegations",
                          "type": 289,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 290,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 189,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "delegations",
                          "type": 289,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 290,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "def": {
                "sequence": {
                  "type": 288
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "def": {
                "tuple": [4, 39]
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": ["pallet_democracy", "types", "Delegations"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 290,
            "type": {
              "path": ["pallet_democracy", "vote", "PriorLock"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "def": {
                "tuple": [9, 38]
              }
            }
          },
          {
            "id": 292,
            "type": {
              "def": {
                "tuple": [4, 37]
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": ["pallet_democracy", "Releases"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 294,
            "type": {
              "path": ["pallet_democracy", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "index": 0,
                      "docs": ["Value too low"]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 1,
                      "docs": ["Proposal does not exist"]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "index": 2,
                      "docs": ["Cannot cancel the same proposal twice"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 3,
                      "docs": ["Proposal already made"]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "index": 4,
                      "docs": ["Proposal still blacklisted"]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "index": 5,
                      "docs": ["Next external proposal not simple majority"]
                    },
                    {
                      "name": "InvalidHash",
                      "index": 6,
                      "docs": ["Invalid hash"]
                    },
                    {
                      "name": "NoProposal",
                      "index": 7,
                      "docs": ["No external proposal"]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "index": 8,
                      "docs": ["Identity may not veto a proposal twice"]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "index": 9,
                      "docs": ["Preimage already noted"]
                    },
                    {
                      "name": "NotImminent",
                      "index": 10,
                      "docs": ["Not imminent"]
                    },
                    {
                      "name": "TooEarly",
                      "index": 11,
                      "docs": ["Too early"]
                    },
                    {
                      "name": "Imminent",
                      "index": 12,
                      "docs": ["Imminent"]
                    },
                    {
                      "name": "PreimageMissing",
                      "index": 13,
                      "docs": ["Preimage not found"]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "index": 14,
                      "docs": ["Vote given for invalid referendum"]
                    },
                    {
                      "name": "PreimageInvalid",
                      "index": 15,
                      "docs": ["Invalid preimage"]
                    },
                    {
                      "name": "NoneWaiting",
                      "index": 16,
                      "docs": ["No proposals waiting"]
                    },
                    {
                      "name": "NotVoter",
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 19,
                      "docs": ["The account is already delegating."]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "index": 21,
                      "docs": ["The account is not currently delegating."]
                    },
                    {
                      "name": "VotesExist",
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "index": 24,
                      "docs": ["Delegation to oneself makes no sense."]
                    },
                    {
                      "name": "WrongUpperBound",
                      "index": 25,
                      "docs": ["Invalid upper bound."]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 26,
                      "docs": ["Maximum number of votes reached."]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 27,
                      "docs": ["Maximum number of proposals reached."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 295,
            "type": {
              "def": {
                "sequence": {
                  "type": 296
                }
              }
            }
          },
          {
            "id": 296,
            "type": {
              "path": ["pallet_elections_phragmen", "SeatHolder"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": ["pallet_elections_phragmen", "Voter"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 37,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "path": ["pallet_elections_phragmen", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "index": 0,
                      "docs": [
                        "Cannot vote when no candidates or members exist."
                      ]
                    },
                    {
                      "name": "NoVotes",
                      "index": 1,
                      "docs": ["Must vote for at least one candidate."]
                    },
                    {
                      "name": "TooManyVotes",
                      "index": 2,
                      "docs": ["Cannot vote more than candidates."]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "index": 3,
                      "docs": ["Cannot vote more than maximum allowed."]
                    },
                    {
                      "name": "LowBalance",
                      "index": 4,
                      "docs": [
                        "Cannot vote with stake less than minimum balance."
                      ]
                    },
                    {
                      "name": "UnableToPayBond",
                      "index": 5,
                      "docs": ["Voter can not pay voting bond."]
                    },
                    {
                      "name": "MustBeVoter",
                      "index": 6,
                      "docs": ["Must be a voter."]
                    },
                    {
                      "name": "ReportSelf",
                      "index": 7,
                      "docs": ["Cannot report self."]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "index": 8,
                      "docs": ["Duplicated candidate submission."]
                    },
                    {
                      "name": "MemberSubmit",
                      "index": 9,
                      "docs": ["Member cannot re-submit candidacy."]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "index": 10,
                      "docs": ["Runner cannot re-submit candidacy."]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "index": 11,
                      "docs": ["Candidate does not have enough funds."]
                    },
                    {
                      "name": "NotMember",
                      "index": 12,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "index": 13,
                      "docs": [
                        "The provided count of number of candidates is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "index": 14,
                      "docs": [
                        "The provided count of number of votes is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "index": 15,
                      "docs": [
                        "The renouncing origin presented a wrong `Renouncing` parameter."
                      ]
                    },
                    {
                      "name": "InvalidReplacement",
                      "index": 16,
                      "docs": [
                        "Prediction regarding replacement after member removal is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 140,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": ["pallet_collective", "Votes"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount"
                    },
                    {
                      "name": "ayes",
                      "type": 37,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "nays",
                      "type": 37,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": ["pallet_collective", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": ["Account is not a member"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": ["Duplicate proposals not allowed"]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": ["Proposal must exist"]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": ["Mismatched index"]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": ["Duplicate vote ignored"]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": ["Members are already initialized!"]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 302,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 140,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "path": ["pallet_collective", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": ["Account is not a member"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": ["Duplicate proposals not allowed"]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": ["Proposal must exist"]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": ["Mismatched index"]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": ["Duplicate vote ignored"]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": ["Members are already initialized!"]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 304,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 48
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 195,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "path": ["orml_vesting", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ZeroVestingPeriod",
                      "index": 0,
                      "docs": ["Vesting period is zero"]
                    },
                    {
                      "name": "ZeroVestingPeriodCount",
                      "index": 1,
                      "docs": ["Number of vests is zero"]
                    },
                    {
                      "name": "InsufficientBalanceToLock",
                      "index": 2,
                      "docs": ["Insufficient amount of balance to lock"]
                    },
                    {
                      "name": "TooManyVestingSchedules",
                      "index": 3,
                      "docs": ["This account have too many vesting schedules"]
                    },
                    {
                      "name": "AmountLow",
                      "index": 4,
                      "docs": ["The vested transfer amount is too low"]
                    },
                    {
                      "name": "MaxVestingSchedulesExceeded",
                      "index": 5,
                      "docs": [
                        "Failed because the maximum vesting schedules was exceeded"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 306,
            "type": {
              "def": {
                "tuple": [307, 6]
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 308
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 309,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "path": ["pallet_proxy", "ProxyDefinition"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 51
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "proxy_type",
                      "type": 51,
                      "typeName": "ProxyType"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 309,
            "type": {
              "def": {
                "sequence": {
                  "type": 308
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "def": {
                "tuple": [311, 6]
              }
            }
          },
          {
            "id": 311,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 312
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 313,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": ["pallet_proxy", "Announcement"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "def": {
                "sequence": {
                  "type": 312
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": ["pallet_proxy", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": ["Proxy registration not found."]
                    },
                    {
                      "name": "NotProxy",
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "index": 4,
                      "docs": ["Account is already a proxy."]
                    },
                    {
                      "name": "NoPermission",
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "index": 7,
                      "docs": ["Cannot add self as proxy."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 315,
            "type": {
              "path": ["pallet_tips", "OpenTip"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "reason",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "closes",
                      "type": 119,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "tips",
                      "type": 42,
                      "typeName": "Vec<(AccountId, Balance)>"
                    },
                    {
                      "name": "finders_fee",
                      "type": 45,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "path": ["sp_arithmetic", "per_things", "Percent"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 317,
            "type": {
              "path": ["pallet_tips", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReasonTooBig",
                      "index": 0,
                      "docs": ["The reason given is just too big."]
                    },
                    {
                      "name": "AlreadyKnown",
                      "index": 1,
                      "docs": ["The tip was already found/started."]
                    },
                    {
                      "name": "UnknownTip",
                      "index": 2,
                      "docs": ["The tip hash is unknown."]
                    },
                    {
                      "name": "NotFinder",
                      "index": 3,
                      "docs": [
                        "The account attempting to retract the tip is not the finder of the tip."
                      ]
                    },
                    {
                      "name": "StillOpen",
                      "index": 4,
                      "docs": [
                        "The tip cannot be claimed/closed because there are not enough tippers yet."
                      ]
                    },
                    {
                      "name": "Premature",
                      "index": 5,
                      "docs": [
                        "The tip cannot be claimed/closed because it's still in the countdown period."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 318,
            "type": {
              "def": {
                "sequence": {
                  "type": 319
                }
              }
            }
          },
          {
            "id": 319,
            "type": {
              "path": ["pallet_authorship", "UncleEntryItem"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        },
                        {
                          "type": 138,
                          "typeName": "Option<Author>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 320,
            "type": {
              "path": ["pallet_authorship", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "index": 0,
                      "docs": ["The uncle parent not in the chain."]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "index": 1,
                      "docs": ["Uncles already set in the block."]
                    },
                    {
                      "name": "TooManyUncles",
                      "index": 2,
                      "docs": ["Too many uncles."]
                    },
                    {
                      "name": "GenesisUncle",
                      "index": 3,
                      "docs": ["The uncle is genesis."]
                    },
                    {
                      "name": "TooHighUncle",
                      "index": 4,
                      "docs": ["The uncle is too high in chain."]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "index": 5,
                      "docs": ["The uncle is already included."]
                    },
                    {
                      "name": "OldUncle",
                      "index": 6,
                      "docs": ["The uncle isn't recent enough to be included."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 321,
            "type": {
              "def": {
                "sequence": {
                  "type": 322
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": ["pallet_collator_selection", "pallet", "CandidateInfo"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "path": ["pallet_collator_selection", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCandidates",
                      "index": 0,
                      "docs": ["Too many candidates"]
                    },
                    {
                      "name": "TooFewCandidates",
                      "index": 1,
                      "docs": ["Too few candidates"]
                    },
                    {
                      "name": "Unknown",
                      "index": 2,
                      "docs": ["Unknown error"]
                    },
                    {
                      "name": "Permission",
                      "index": 3,
                      "docs": ["Permission issue"]
                    },
                    {
                      "name": "AlreadyCandidate",
                      "index": 4,
                      "docs": ["User is already a candidate"]
                    },
                    {
                      "name": "NotCandidate",
                      "index": 5,
                      "docs": ["User is not a candidate"]
                    },
                    {
                      "name": "AlreadyInvulnerable",
                      "index": 6,
                      "docs": ["User is already an Invulnerable"]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 7,
                      "docs": ["Account has no associated validator ID"]
                    },
                    {
                      "name": "ValidatorNotRegistered",
                      "index": 8,
                      "docs": ["Validator ID is not yet registered"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 324,
            "type": {
              "def": {
                "sequence": {
                  "type": 325
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "def": {
                "tuple": [0, 205]
              }
            }
          },
          {
            "id": 326,
            "type": {
              "def": {
                "tuple": [327, 10]
              }
            }
          },
          {
            "id": 327,
            "type": {
              "path": ["sp_core", "crypto", "KeyTypeId"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "path": ["pallet_session", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": ["Invalid ownership proof."]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": ["No associated validator ID for account."]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": ["Registered duplicate key."]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": ["No keys are associated with this account."]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Error for the session pallet."]
            }
          },
          {
            "id": 329,
            "type": {
              "path": ["pallet_preimage", "RequestStatus"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "Option<(AccountId, Balance)>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 43
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 43
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "path": ["pallet_preimage", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooLarge",
                      "index": 0,
                      "docs": ["Preimage is too large to store on-chain."]
                    },
                    {
                      "name": "AlreadyNoted",
                      "index": 1,
                      "docs": ["Preimage has already been noted on-chain."]
                    },
                    {
                      "name": "NotAuthorized",
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 333,
            "type": {
              "path": ["pallet_uniques", "types", "ClassDetails"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "total_deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "free_holding",
                      "type": 45,
                      "typeName": "bool"
                    },
                    {
                      "name": "instances",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "instance_metadatas",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "def": {
                "tuple": [0, 6, 6]
              }
            }
          },
          {
            "id": 335,
            "type": {
              "def": {
                "tuple": [6, 6]
              }
            }
          },
          {
            "id": 336,
            "type": {
              "path": ["pallet_uniques", "types", "InstanceDetails"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approved",
                      "type": 138,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "path": ["pallet_uniques", "types", "ClassMetadata"],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "data",
                      "type": 58,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 338,
            "type": {
              "path": ["pallet_uniques", "types", "InstanceMetadata"],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "data",
                      "type": 58,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 339,
            "type": {
              "def": {
                "tuple": [6, 60, 61]
              }
            }
          },
          {
            "id": 340,
            "type": {
              "def": {
                "tuple": [62, 6]
              }
            }
          },
          {
            "id": 341,
            "type": {
              "path": ["pallet_uniques", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "index": 0,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "index": 1,
                      "docs": ["The given asset ID is unknown."]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 2,
                      "docs": [
                        "The asset instance ID has already been used for an asset."
                      ]
                    },
                    {
                      "name": "WrongOwner",
                      "index": 3,
                      "docs": [
                        "The owner turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 4,
                      "docs": ["Invalid witness data given."]
                    },
                    {
                      "name": "InUse",
                      "index": 5,
                      "docs": ["The asset ID is already taken."]
                    },
                    {
                      "name": "Frozen",
                      "index": 6,
                      "docs": ["The asset instance or class is frozen."]
                    },
                    {
                      "name": "WrongDelegate",
                      "index": 7,
                      "docs": [
                        "The delegate turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "NoDelegate",
                      "index": 8,
                      "docs": ["There is no delegate approved."]
                    },
                    {
                      "name": "Unapproved",
                      "index": 9,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 342,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 343
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 343
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "path": ["polkadot_primitives", "v1", "UpgradeRestriction"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 9,
                      "typeName": "relay_chain::Hash"
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 33,
                      "typeName": "(u32, u32)"
                    },
                    {
                      "name": "ingress_channels",
                      "type": 345,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    },
                    {
                      "name": "egress_channels",
                      "type": 345,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 345,
            "type": {
              "def": {
                "sequence": {
                  "type": 346
                }
              }
            }
          },
          {
            "id": 346,
            "type": {
              "def": {
                "tuple": [106, 347]
              }
            }
          },
          {
            "id": 347,
            "type": {
              "path": ["polkadot_primitives", "v1", "AbridgedHrmpChannel"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 105,
                      "typeName": "Option<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "AbridgedHostConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "RelayHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 106
                },
                {
                  "name": "V",
                  "type": 349
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 351
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "def": {
                "sequence": {
                  "type": 352
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "def": {
                "tuple": [106, 349]
              }
            }
          },
          {
            "id": 353,
            "type": {
              "def": {
                "sequence": {
                  "type": 354
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "path": ["polkadot_core_primitives", "OutboundHrmpMessage"],
              "params": [
                {
                  "name": "Id",
                  "type": 106
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 106,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending"
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function"
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block"
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block"
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": ["No code upgrade has been authorized."]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 356,
            "type": {
              "path": ["pallet_xcm", "pallet", "QueryStatus"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 102,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "maybe_notify",
                          "type": 357,
                          "typeName": "Option<(u8, u8)>"
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 102,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "is_active",
                          "type": 45,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 359,
                          "typeName": "VersionedResponse"
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 357,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 358
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 358
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "def": {
                "tuple": [2, 2]
              }
            }
          },
          {
            "id": 359,
            "type": {
              "path": ["xcm", "VersionedResponse"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 229,
                          "typeName": "v0::Response"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 234,
                          "typeName": "v1::Response"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 87,
                          "typeName": "v2::Response"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "def": {
                "tuple": [4, 102]
              }
            }
          },
          {
            "id": 361,
            "type": {
              "def": {
                "tuple": [8, 8, 4]
              }
            }
          },
          {
            "id": 362,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 363
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 364,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 363,
            "type": {
              "def": {
                "tuple": [102, 4]
              }
            }
          },
          {
            "id": 364,
            "type": {
              "def": {
                "sequence": {
                  "type": 363
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "path": ["pallet_xcm", "pallet", "VersionMigrationStage"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "index": 0
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "index": 1
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "type": 34,
                          "typeName": "Option<Vec<u8>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 366,
            "type": {
              "path": ["pallet_xcm", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": ["The message execution fails the filter."]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": ["The message's weight could not be determined."]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": ["The assets to be sent are empty."]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": ["Origin is invalid for sending."]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 367,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 368,
            "type": {
              "def": {
                "sequence": {
                  "type": 369
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "InboundChannelDetails"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 106,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 370,
                      "typeName": "InboundState"
                    },
                    {
                      "name": "message_metadata",
                      "type": 371,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "InboundState"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 371,
            "type": {
              "def": {
                "sequence": {
                  "type": 372
                }
              }
            }
          },
          {
            "id": 372,
            "type": {
              "def": {
                "tuple": [4, 373]
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": ["polkadot_parachain", "primitives", "XcmpMessageFormat"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "index": 0
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "index": 1
                    },
                    {
                      "name": "Signals",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "def": {
                "tuple": [106, 4]
              }
            }
          },
          {
            "id": 375,
            "type": {
              "def": {
                "sequence": {
                  "type": 376
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "OutboundChannelDetails"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 106,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 377,
                      "typeName": "OutboundState"
                    },
                    {
                      "name": "signals_exist",
                      "type": 45,
                      "typeName": "bool"
                    },
                    {
                      "name": "first_index",
                      "type": 52,
                      "typeName": "u16"
                    },
                    {
                      "name": "last_index",
                      "type": 52,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "OutboundState"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "def": {
                "tuple": [106, 52]
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "QueueConfigData"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "threshold_weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 380,
            "type": {
              "def": {
                "tuple": [106, 4, 10]
              }
            }
          },
          {
            "id": 381,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "index": 0,
                      "docs": ["Failed to send XCM message."]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "index": 1,
                      "docs": ["Bad XCM origin."]
                    },
                    {
                      "name": "BadXcm",
                      "index": 2,
                      "docs": ["Bad XCM data."]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "index": 3,
                      "docs": ["Bad overweight index."]
                    },
                    {
                      "name": "WeightOverLimit",
                      "index": 4,
                      "docs": [
                        "Provided weight is possibly not enough to execute the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 382,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "ConfigData"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 383,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "PageIndexData"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "overweight_count",
                      "type": 8,
                      "typeName": "OverweightIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 384,
            "type": {
              "def": {
                "sequence": {
                  "type": 385
                }
              }
            }
          },
          {
            "id": 385,
            "type": {
              "def": {
                "tuple": [4, 10]
              }
            }
          },
          {
            "id": 386,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0,
                      "docs": ["The message index given is unknown."]
                    },
                    {
                      "name": "OverLimit",
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 387,
            "type": {
              "path": ["pallet_asset_registry", "types", "AssetDetails"],
              "params": [
                {
                  "name": "AssetId",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 109
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 109,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "asset_type",
                      "type": 110,
                      "typeName": "AssetType<AssetId>"
                    },
                    {
                      "name": "existential_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "locked",
                      "type": 45,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "path": ["pallet_asset_registry", "types", "AssetMetadata"],
              "params": [
                {
                  "name": "BoundedString",
                  "type": 109
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "symbol",
                      "type": 109,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "path": ["pallet_asset_registry", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoIdAvailable",
                      "index": 0,
                      "docs": [
                        "Asset Id is not available. This only happens when it reaches the MAX value of given id type."
                      ]
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 1,
                      "docs": ["Invalid asset name or symbol."]
                    },
                    {
                      "name": "TooLong",
                      "index": 2,
                      "docs": ["Invalid asset name or symbol."]
                    },
                    {
                      "name": "AssetNotRegistered",
                      "index": 3,
                      "docs": [
                        "Asset ID is not registered in the asset-registry."
                      ]
                    },
                    {
                      "name": "AssetAlreadyRegistered",
                      "index": 4,
                      "docs": ["Asset is already registered."]
                    },
                    {
                      "name": "InvalidSharedAssetLen",
                      "index": 5,
                      "docs": [
                        "Incorrect number of assets provided to create shared asset."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 390,
            "type": {
              "path": ["pallet_xyk", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotCreatePoolWithSameAssets",
                      "index": 0,
                      "docs": [
                        "It is not allowed to create a pool between same assets."
                      ]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "index": 1,
                      "docs": [
                        "Liquidity has not reached the required minimum."
                      ]
                    },
                    {
                      "name": "InsufficientTradingAmount",
                      "index": 2,
                      "docs": ["Amount is less than min trading limit."]
                    },
                    {
                      "name": "ZeroLiquidity",
                      "index": 3,
                      "docs": ["Liquidity is zero."]
                    },
                    {
                      "name": "ZeroInitialPrice",
                      "index": 4,
                      "docs": [
                        "It is not allowed to create a pool with zero initial price."
                      ]
                    },
                    {
                      "name": "CreatePoolAssetAmountInvalid",
                      "index": 5,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "InvalidMintedLiquidity",
                      "index": 6,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "InvalidLiquidityAmount",
                      "index": 7,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "AssetAmountExceededLimit",
                      "index": 8,
                      "docs": ["Asset amount has exceeded given limit."]
                    },
                    {
                      "name": "AssetAmountNotReachedLimit",
                      "index": 9,
                      "docs": ["Asset amount has not reached given limit."]
                    },
                    {
                      "name": "InsufficientAssetBalance",
                      "index": 10,
                      "docs": ["Asset balance is not sufficient."]
                    },
                    {
                      "name": "InsufficientPoolAssetBalance",
                      "index": 11,
                      "docs": ["Not enough asset liquidity in the pool."]
                    },
                    {
                      "name": "InsufficientNativeCurrencyBalance",
                      "index": 12,
                      "docs": ["Not enough core asset liquidity in the pool."]
                    },
                    {
                      "name": "TokenPoolNotFound",
                      "index": 13,
                      "docs": [
                        "Liquidity pool for given assets does not exist."
                      ]
                    },
                    {
                      "name": "TokenPoolAlreadyExists",
                      "index": 14,
                      "docs": [
                        "Liquidity pool for given assets already exists."
                      ]
                    },
                    {
                      "name": "AddAssetAmountInvalid",
                      "index": 15,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "RemoveAssetAmountInvalid",
                      "index": 16,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "SellAssetAmountInvalid",
                      "index": 17,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "BuyAssetAmountInvalid",
                      "index": 18,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "FeeAmountInvalid",
                      "index": 19,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "CannotApplyDiscount",
                      "index": 20,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "MaxOutRatioExceeded",
                      "index": 21,
                      "docs": [
                        "Max fraction of pool to buy in single transaction has been exceeded."
                      ]
                    },
                    {
                      "name": "MaxInRatioExceeded",
                      "index": 22,
                      "docs": [
                        "Max fraction of pool to sell in single transaction has been exceeded."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 23,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "CannotCreatePool",
                      "index": 24,
                      "docs": ["Pool cannot be created due to outside factors."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 391,
            "type": {
              "path": ["pallet_duster", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccountBlacklisted",
                      "index": 0,
                      "docs": ["Account is excluded from dusting."]
                    },
                    {
                      "name": "AccountNotBlacklisted",
                      "index": 1,
                      "docs": [
                        "Account is not present in the non-dustable list."
                      ]
                    },
                    {
                      "name": "ZeroBalance",
                      "index": 2,
                      "docs": ["The balance is zero."]
                    },
                    {
                      "name": "BalanceSufficient",
                      "index": 3,
                      "docs": [
                        "The balance is sufficient to keep account open."
                      ]
                    },
                    {
                      "name": "DustAccountNotSet",
                      "index": 4,
                      "docs": ["Dust account is not set."]
                    },
                    {
                      "name": "ReserveAccountNotSet",
                      "index": 5,
                      "docs": ["Reserve account is not set."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 392,
            "type": {
              "def": {
                "sequence": {
                  "type": 393
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": ["primitives", "ExchangeIntention"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "IntentionID",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "assets",
                      "type": 116,
                      "typeName": "asset::AssetPair"
                    },
                    {
                      "name": "amount_in",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "amount_out",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "trade_limit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "discount",
                      "type": 45,
                      "typeName": "bool"
                    },
                    {
                      "name": "sell_or_buy",
                      "type": 115,
                      "typeName": "IntentionType"
                    },
                    {
                      "name": "intention_id",
                      "type": 9,
                      "typeName": "IntentionID"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "path": ["pallet_exchange", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TokenPoolNotFound",
                      "index": 0,
                      "docs": ["Token pool does not exist."]
                    },
                    {
                      "name": "InsufficientAssetBalance",
                      "index": 1,
                      "docs": ["Insufficient asset balance."]
                    },
                    {
                      "name": "TradeAmountExceededLimit",
                      "index": 2,
                      "docs": ["Given trading limit has been exceeded (buy)."]
                    },
                    {
                      "name": "TradeAmountNotReachedLimit",
                      "index": 3,
                      "docs": [
                        "Given trading limit has not been reached (sell)."
                      ]
                    },
                    {
                      "name": "ZeroSpotPrice",
                      "index": 4,
                      "docs": ["Overflow"]
                    },
                    {
                      "name": "MinimumTradeLimitNotReached",
                      "index": 5,
                      "docs": ["Trade amount is too low."]
                    },
                    {
                      "name": "IntentionCountOverflow",
                      "index": 6,
                      "docs": ["Overflow"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 395,
            "type": {
              "def": {
                "tuple": [0, 4]
              }
            }
          },
          {
            "id": 396,
            "type": {
              "path": ["pallet_lbp", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotCreatePoolWithSameAssets",
                      "index": 0,
                      "docs": ["Pool assets can not be the same"]
                    },
                    {
                      "name": "NotOwner",
                      "index": 1,
                      "docs": ["Account is not a pool owner"]
                    },
                    {
                      "name": "SaleStarted",
                      "index": 2,
                      "docs": ["Sale already started"]
                    },
                    {
                      "name": "SaleNotEnded",
                      "index": 3,
                      "docs": ["Sale is still in progress"]
                    },
                    {
                      "name": "SaleIsNotRunning",
                      "index": 4,
                      "docs": ["Sale is not running"]
                    },
                    {
                      "name": "MaxSaleDurationExceeded",
                      "index": 5,
                      "docs": ["Sale duration is too long"]
                    },
                    {
                      "name": "CannotAddZeroLiquidity",
                      "index": 6,
                      "docs": ["Liquidity being added should not be zero"]
                    },
                    {
                      "name": "InsufficientAssetBalance",
                      "index": 7,
                      "docs": ["Asset balance too low"]
                    },
                    {
                      "name": "PoolNotFound",
                      "index": 8,
                      "docs": ["Pool does not exist"]
                    },
                    {
                      "name": "PoolAlreadyExists",
                      "index": 9,
                      "docs": ["Pool has been already created"]
                    },
                    {
                      "name": "InvalidBlockRange",
                      "index": 10,
                      "docs": ["Invalid block range"]
                    },
                    {
                      "name": "WeightCalculationError",
                      "index": 11,
                      "docs": ["Calculation error"]
                    },
                    {
                      "name": "InvalidWeight",
                      "index": 12,
                      "docs": ["Weight set is out of range"]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 13,
                      "docs": ["Can not perform a trade with zero amount"]
                    },
                    {
                      "name": "MaxInRatioExceeded",
                      "index": 14,
                      "docs": ["Trade amount is too high"]
                    },
                    {
                      "name": "MaxOutRatioExceeded",
                      "index": 15,
                      "docs": ["Trade amount is too high"]
                    },
                    {
                      "name": "FeeAmountInvalid",
                      "index": 16,
                      "docs": ["Invalid fee amount"]
                    },
                    {
                      "name": "TradingLimitReached",
                      "index": 17,
                      "docs": ["Trading limit reached"]
                    },
                    {
                      "name": "Overflow",
                      "index": 18,
                      "docs": ["An unexpected integer overflow occurred"]
                    },
                    {
                      "name": "NothingToUpdate",
                      "index": 19,
                      "docs": ["Nothing to update"]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "index": 20,
                      "docs": [
                        "Liquidity has not reached the required minimum."
                      ]
                    },
                    {
                      "name": "InsufficientTradingAmount",
                      "index": 21,
                      "docs": ["Amount is less than minimum trading limit."]
                    },
                    {
                      "name": "FeeCollectorWithAssetAlreadyUsed",
                      "index": 22,
                      "docs": ["Not more than one fee collector per asset id"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 397,
            "type": {
              "path": ["pallet_nft", "types", "ClassInfo"],
              "params": [
                {
                  "name": "ClassType",
                  "type": 122
                },
                {
                  "name": "BoundedVec",
                  "type": 58
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "class_type",
                      "type": 122,
                      "typeName": "ClassType"
                    },
                    {
                      "name": "metadata",
                      "type": 58,
                      "typeName": "BoundedVec"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 398,
            "type": {
              "path": ["pallet_nft", "types", "InstanceInfo"],
              "params": [
                {
                  "name": "BoundedVec",
                  "type": 58
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "metadata",
                      "type": 58,
                      "typeName": "BoundedVec"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 399,
            "type": {
              "path": ["pallet_nft", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoAvailableInstanceId",
                      "index": 0,
                      "docs": ["Count of instances overflown"]
                    },
                    {
                      "name": "NoAvailableClassId",
                      "index": 1,
                      "docs": ["Count of classes overflown"]
                    },
                    {
                      "name": "TokenClassNotEmpty",
                      "index": 2,
                      "docs": ["Class still contains minted tokens"]
                    },
                    {
                      "name": "ClassUnknown",
                      "index": 3,
                      "docs": ["Class does not exist"]
                    },
                    {
                      "name": "InstanceUnknown",
                      "index": 4,
                      "docs": ["Instance does not exist"]
                    },
                    {
                      "name": "NotPermitted",
                      "index": 5,
                      "docs": ["Operation not permitted"]
                    },
                    {
                      "name": "IdReserved",
                      "index": 6,
                      "docs": ["ID reserved for runtime"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 400,
            "type": {
              "path": ["pallet_liquidity_mining", "GlobalPool"],
              "params": [
                {
                  "name": "T",
                  "type": 401
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "GlobalPoolId"
                    },
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountIdOf<T>"
                    },
                    {
                      "name": "updated_at",
                      "type": 4,
                      "typeName": "PeriodOf<T>"
                    },
                    {
                      "name": "total_shares_z",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accumulated_rpz",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reward_currency",
                      "type": 4,
                      "typeName": "AssetIdOf<T>"
                    },
                    {
                      "name": "accumulated_rewards",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "paid_accumulated_rewards",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "yield_per_period",
                      "type": 124,
                      "typeName": "Permill"
                    },
                    {
                      "name": "planned_yielding_periods",
                      "type": 4,
                      "typeName": "PeriodOf<T>"
                    },
                    {
                      "name": "blocks_per_period",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    },
                    {
                      "name": "incentivized_asset",
                      "type": 4,
                      "typeName": "AssetIdOf<T>"
                    },
                    {
                      "name": "max_reward_per_period",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "liq_pools_count",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": ["basilisk_runtime", "Runtime"],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 402,
            "type": {
              "def": {
                "tuple": [4, 0]
              }
            }
          },
          {
            "id": 403,
            "type": {
              "path": ["pallet_liquidity_mining", "LiquidityPoolYieldFarm"],
              "params": [
                {
                  "name": "T",
                  "type": 401
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "PoolId"
                    },
                    {
                      "name": "updated_at",
                      "type": 4,
                      "typeName": "PeriodOf<T>"
                    },
                    {
                      "name": "total_shares",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "total_valued_shares",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accumulated_rpvs",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accumulated_rpz",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "loyalty_curve",
                      "type": 126,
                      "typeName": "Option<LoyaltyCurve>"
                    },
                    {
                      "name": "stake_in_global_pool",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "multiplier",
                      "type": 125,
                      "typeName": "PoolMultiplier"
                    },
                    {
                      "name": "canceled",
                      "type": 45,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "path": ["pallet_liquidity_mining", "Deposit"],
              "params": [
                {
                  "name": "T",
                  "type": 401
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "shares",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "valued_shares",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accumulated_rpvs",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accumulated_claimed_rewards",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "entered_at",
                      "type": 4,
                      "typeName": "PeriodOf<T>"
                    },
                    {
                      "name": "updated_at",
                      "type": 4,
                      "typeName": "PeriodOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 405,
            "type": {
              "def": {
                "tuple": [116, 8, 4]
              }
            }
          },
          {
            "id": 406,
            "type": {
              "path": ["pallet_liquidity_mining", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0,
                      "docs": ["Math computation overflow."]
                    },
                    {
                      "name": "InsufficientBalanceInGlobalPool",
                      "index": 1,
                      "docs": ["Insufficient reward currency in global pool."]
                    },
                    {
                      "name": "InvalidPoolId",
                      "index": 2,
                      "docs": [
                        "Provided pool id is not valid. Valid range is [1, u32::MAX)"
                      ]
                    },
                    {
                      "name": "InvalidPlannedYieldingPeriods",
                      "index": 3,
                      "docs": [
                        "Planned yielding periods is less than `MinPlannedYieldingPeriods`."
                      ]
                    },
                    {
                      "name": "InvalidBlocksPerPeriod",
                      "index": 4,
                      "docs": ["Blocks per period can't be 0."]
                    },
                    {
                      "name": "InvalidYieldPerPeriod",
                      "index": 5,
                      "docs": ["Yield per period can't be 0."]
                    },
                    {
                      "name": "InvalidTotalRewards",
                      "index": 6,
                      "docs": [
                        "Total rewards is less than `MinTotalFarmRewards`."
                      ]
                    },
                    {
                      "name": "InsufficientRewardCurrencyBalance",
                      "index": 7,
                      "docs": ["Reward currency balance is not sufficient."]
                    },
                    {
                      "name": "Forbidden",
                      "index": 8,
                      "docs": ["Account is not allowed to perform action."]
                    },
                    {
                      "name": "FarmNotFound",
                      "index": 9,
                      "docs": ["Farm does not exist."]
                    },
                    {
                      "name": "LiquidityPoolAlreadyExists",
                      "index": 10,
                      "docs": ["Liquidity pool already exist in the farm."]
                    },
                    {
                      "name": "InvalidMultiplier",
                      "index": 11,
                      "docs": ["Pool multiplier can't be 0"]
                    },
                    {
                      "name": "InvalidInitialRewardPercentage",
                      "index": 12,
                      "docs": [
                        "Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1)"
                      ]
                    },
                    {
                      "name": "InsufficientAmmSharesBalance",
                      "index": 13,
                      "docs": [
                        "Account balance of amm pool shares is not sufficient."
                      ]
                    },
                    {
                      "name": "AmmPoolDoesNotExist",
                      "index": 14,
                      "docs": ["AMM pool does not exist"]
                    },
                    {
                      "name": "LiquidityPoolNotFound",
                      "index": 15,
                      "docs": ["Assets liq. pool does not exist."]
                    },
                    {
                      "name": "FarmIsNotEmpty",
                      "index": 16,
                      "docs": ["One or more liq. pools exist in farm."]
                    },
                    {
                      "name": "RewardBalanceIsNotZero",
                      "index": 17,
                      "docs": ["Global pool rewards balance is not 0."]
                    },
                    {
                      "name": "LiquidityPoolMetadataNotFound",
                      "index": 18,
                      "docs": ["Liq. pool's metadata does not exist."]
                    },
                    {
                      "name": "NftDoesNotExist",
                      "index": 19,
                      "docs": ["NFT does not exist."]
                    },
                    {
                      "name": "NftIdOverflow",
                      "index": 20,
                      "docs": ["Max number of nft id was reached."]
                    },
                    {
                      "name": "InvalidNftId",
                      "index": 21,
                      "docs": ["Nft id is not valid."]
                    },
                    {
                      "name": "LiquidityMiningCanceled",
                      "index": 22,
                      "docs": ["Pool's liquidity mining is canceled."]
                    },
                    {
                      "name": "LiquidityMiningIsNotCanceled",
                      "index": 23,
                      "docs": ["Pool's liquidity mining is not canceled."]
                    },
                    {
                      "name": "InvalidDepositAmount",
                      "index": 24,
                      "docs": ["LP tokens amount is not valid."]
                    },
                    {
                      "name": "NotDepositOwner",
                      "index": 25,
                      "docs": ["Account is not deposit owner."]
                    },
                    {
                      "name": "CantFindDepositOwner",
                      "index": 26,
                      "docs": ["Nft pallet didn't return an owner."]
                    },
                    {
                      "name": "DoubleClaimInThePeriod",
                      "index": 27,
                      "docs": [
                        "Multiple claims in the same period is not allowed."
                      ]
                    },
                    {
                      "name": "MissingIncentivizedAsset",
                      "index": 28,
                      "docs": [
                        "Farm's `incentivized_asset` is missing in provided asset pair."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 407,
            "type": {
              "path": ["pallet_transaction_multi_payment", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnsupportedCurrency",
                      "index": 0,
                      "docs": ["Selected currency is not supported."]
                    },
                    {
                      "name": "ZeroBalance",
                      "index": 1,
                      "docs": ["Account balance should be non-zero."]
                    },
                    {
                      "name": "AlreadyAccepted",
                      "index": 2,
                      "docs": [
                        "Currency is already in the list of accepted currencies."
                      ]
                    },
                    {
                      "name": "CoreAssetNotAllowed",
                      "index": 3,
                      "docs": [
                        "It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design."
                      ]
                    },
                    {
                      "name": "ZeroPrice",
                      "index": 4,
                      "docs": ["Fallback price cannot be zero."]
                    },
                    {
                      "name": "FallbackPriceNotFound",
                      "index": 5,
                      "docs": ["Fallback price was not found."]
                    },
                    {
                      "name": "Overflow",
                      "index": 6,
                      "docs": ["Math overflow"]
                    },
                    {
                      "name": "FallbackAccountNotSet",
                      "index": 7,
                      "docs": ["Fallback account is not set."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 408,
            "type": {
              "path": ["pallet_price_oracle", "types", "PriceEntry"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "price",
                      "type": 125,
                      "typeName": "Price"
                    },
                    {
                      "name": "trade_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "liquidity_amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "def": {
                "sequence": {
                  "type": 410
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "def": {
                "tuple": [10, 411]
              }
            }
          },
          {
            "id": 411,
            "type": {
              "path": ["pallet_price_oracle", "types", "BucketQueue"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bucket",
                      "type": 412,
                      "typeName": "Bucket"
                    },
                    {
                      "name": "last",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 413
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "path": ["pallet_price_oracle", "types", "PriceInfo"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "avg_price",
                      "type": 125,
                      "typeName": "Price"
                    },
                    {
                      "name": "volume",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "path": ["pallet_price_oracle", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PriceComputationError",
                      "index": 0,
                      "docs": [
                        "Calculation error occurred while calculating average price"
                      ]
                    },
                    {
                      "name": "UpdateDataOverflow",
                      "index": 1,
                      "docs": ["An unexpected overflow occurred"]
                    },
                    {
                      "name": "AssetAlreadyAdded",
                      "index": 2,
                      "docs": ["Asset has been already added"]
                    },
                    {
                      "name": "TrackedAssetsOverflow",
                      "index": 3,
                      "docs": ["Overflow"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 415,
            "type": {
              "path": ["pallet_relaychain_info", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 416,
            "type": {
              "path": ["orml_currencies", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 0,
                      "docs": [
                        "Unable to convert the Amount type into Balance."
                      ]
                    },
                    {
                      "name": "BalanceTooLow",
                      "index": 1,
                      "docs": ["Balance is too low."]
                    },
                    {
                      "name": "DepositFailed",
                      "index": 2,
                      "docs": ["Deposit result is not expected"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 417,
            "type": {
              "path": ["frame_support", "storage", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 418
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 419,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 418,
            "type": {
              "path": ["orml_tokens", "BalanceLock"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 85,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "def": {
                "sequence": {
                  "type": 418
                }
              }
            }
          },
          {
            "id": 420,
            "type": {
              "path": ["orml_tokens", "AccountData"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 421,
            "type": {
              "path": ["orml_tokens", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": ["The balance is too low"]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 1,
                      "docs": ["Cannot convert Amount into Balance type"]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 2,
                      "docs": [
                        "Failed because liquidity restrictions due to locking"
                      ]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "index": 3,
                      "docs": ["Failed because the maximum locks was exceeded"]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": ["Transfer/payment would kill account"]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 5,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": ["Beneficiary account must pre-exist"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": ["orml_xcm", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The message and destination combination was not recognized as being",
                        "reachable."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "The message and destination was recognized as being reachable but",
                        "the operation could not be completed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 2,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 423,
            "type": {
              "path": ["orml_xtokens", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetHasNoReserve",
                      "index": 0,
                      "docs": ["Asset has no reserve location."]
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "index": 1,
                      "docs": ["Not cross-chain transfer."]
                    },
                    {
                      "name": "InvalidDest",
                      "index": 2,
                      "docs": ["Invalid transfer destination."]
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "index": 3,
                      "docs": ["Currency is not cross-chain transferable."]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 4,
                      "docs": ["The message's weight could not be determined."]
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "index": 5,
                      "docs": ["XCM execution failed."]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the",
                        "destination chain."
                      ]
                    },
                    {
                      "name": "InvalidAncestry",
                      "index": 7,
                      "docs": [
                        "Could not get ancestry of asset reserve location."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "index": 8,
                      "docs": ["The MultiAsset is invalid."]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 9,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 10,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    },
                    {
                      "name": "DistinctReserveForAssetAndFee",
                      "index": 11,
                      "docs": [
                        "We tried sending distinct asset and fee but they have different",
                        "reserve chains"
                      ]
                    },
                    {
                      "name": "ZeroFee",
                      "index": 12,
                      "docs": ["The fee is zero."]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 13,
                      "docs": ["The transfering asset amount is zero."]
                    },
                    {
                      "name": "TooManyAssetsBeingSent",
                      "index": 14,
                      "docs": [
                        "The number of assets to be sent is over the maximum"
                      ]
                    },
                    {
                      "name": "AssetIndexNonExistent",
                      "index": 15,
                      "docs": [
                        "The specified index does not exist in a MultiAssets struct"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 424,
            "type": {
              "def": {
                "tuple": [67, 67]
              }
            }
          },
          {
            "id": 425,
            "type": {
              "def": {
                "tuple": [67, 10]
              }
            }
          },
          {
            "id": 426,
            "type": {
              "path": ["orml_unknown_tokens", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": ["The balance is too low."]
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 1,
                      "docs": ["The operation will cause balance to overflow."]
                    },
                    {
                      "name": "UnhandledAsset",
                      "index": 2,
                      "docs": ["Unhandled asset."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 427,
            "type": {
              "path": ["pallet_sudo", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": ["Sender must be the Sudo account"]
                    }
                  ]
                }
              },
              "docs": ["Error for the Sudo pallet"]
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 0
                },
                {
                  "name": "Call",
                  "type": 184
                },
                {
                  "name": "Signature",
                  "type": 429
                },
                {
                  "name": "Extra",
                  "type": 435
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "path": ["sp_runtime", "MultiSignature"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 430,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 432,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 433,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 430,
            "type": {
              "path": ["sp_core", "ed25519", "Signature"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 431,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 431,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 432,
            "type": {
              "path": ["sp_core", "sr25519", "Signature"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 431,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 433,
            "type": {
              "path": ["sp_core", "ecdsa", "Signature"],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 434,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 434,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 435,
            "type": {
              "def": {
                "tuple": [436, 437, 438, 439, 441, 442, 443, 444]
              }
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 437,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 440,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "path": ["sp_runtime", "generic", "era", "Era"],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 70,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 49,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "pallet_transaction_multi_payment",
                "CurrencyBalanceCheck"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [0],
                "docs": [" Total extrinsics count for the current block."]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0
                ],
                "docs": [" The current weight for the block."]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [0],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 9
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": [" Map of block numbers to block hashes."]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [0],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": [" Hash of the previous block."]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [0],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 15
                },
                "default": [0],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [" The number of events in the `Events<T>` list."]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 9,
                    "value": 141
                  }
                },
                "default": [0],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 142
                },
                "default": [0],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 139
                },
                "default": [0],
                "docs": [" The execution phase of the block."]
              }
            ]
          },
          "calls": {
            "ty": 144
          },
          "event": {
            "ty": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 149,
              "value": [
                0, 242, 5, 42, 1, 0, 0, 0, 0, 136, 82, 106, 116, 0, 0, 0, 0,
                194, 235, 11, 0, 0, 0, 0, 1, 0, 71, 195, 90, 84, 0, 0, 0, 1, 0,
                230, 189, 79, 87, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
                235, 11, 0, 0, 0, 0, 1, 0, 233, 87, 117, 113, 0, 0, 0, 1, 0,
                136, 82, 106, 116, 0, 0, 0, 1, 0, 162, 148, 26, 29, 0, 0, 0, 0,
                194, 235, 11, 0, 0, 0, 0, 0, 0, 0
              ],
              "docs": [" Block & extrinsics weights: base values and limits."]
            },
            {
              "name": "BlockLength",
              "ty": 153,
              "value": [0, 0, 60, 0, 0, 0, 80, 0, 0, 0, 80, 0],
              "docs": [" The maximum length of a block (in bytes)."]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [250, 0, 0, 0],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 155,
              "value": [
                64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 156,
              "value": [
                32, 98, 97, 115, 105, 108, 105, 115, 107, 32, 98, 97, 115, 105,
                108, 105, 115, 107, 1, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 48,
                223, 106, 203, 104, 153, 7, 96, 155, 4, 0, 0, 0, 55, 227, 151,
                252, 124, 145, 245, 228, 1, 0, 0, 0, 64, 254, 58, 212, 1, 248,
                149, 154, 5, 0, 0, 0, 210, 188, 152, 151, 238, 208, 143, 21, 3,
                0, 0, 0, 247, 139, 39, 139, 229, 63, 69, 76, 2, 0, 0, 0, 171,
                60, 5, 114, 41, 31, 235, 139, 1, 0, 0, 0, 221, 113, 141, 92,
                197, 50, 98, 212, 1, 0, 0, 0, 234, 147, 227, 241, 111, 61, 105,
                98, 2, 0, 0, 0, 188, 157, 137, 144, 79, 91, 146, 63, 1, 0, 0, 0,
                55, 200, 187, 19, 80, 169, 162, 168, 1, 0, 0, 0, 120, 87, 47,
                126, 102, 54, 223, 29, 1, 0, 0, 0, 192, 245, 225, 185, 234, 9,
                168, 15, 1, 0, 0, 0, 1, 0, 0, 0, 0
              ],
              "docs": [" Get the chain's current version."]
            },
            {
              "name": "SS58Prefix",
              "ty": 52,
              "value": [57, 39],
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 160
          },
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" Current time for the current block."]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [" Did the timestamp get updated in this block?"]
              }
            ]
          },
          "calls": {
            "ty": 161
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 8,
              "value": [112, 23, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 1
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" The total units issued in the system."]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 162
                  }
                },
                "default": [0],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 166
                  }
                },
                "default": [0],
                "docs": [" Named reserves on some account balances."]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 170
                },
                "default": [0],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 171
          },
          "event": {
            "ty": 26
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" The minimum amount required to keep an account open."]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [50, 0, 0, 0],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [50, 0, 0, 0],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 172
          },
          "index": 2
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 125
                },
                "default": [
                  0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 173
                },
                "default": [0],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "ty": 6,
              "value": [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [0],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "ty": 174,
              "value": [
                4, 244, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1
              ],
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "error": null,
          "index": 3
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [" Number of proposals that have been made."]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 176
                  }
                },
                "default": [0],
                "docs": [" Proposals that have been made."]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 177
                },
                "default": [0],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 179
          },
          "event": {
            "ty": 28
          },
          "constants": [
            {
              "name": "ProposalBond",
              "ty": 124,
              "value": [80, 195, 0, 0],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "ty": 6,
              "value": [
                0, 128, 198, 164, 126, 141, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "ty": 60,
              "value": [
                1, 0, 128, 224, 55, 121, 195, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [96, 84, 0, 0],
              "docs": [" Period between successive spends."]
            },
            {
              "name": "Burn",
              "ty": 124,
              "value": [0, 0, 0, 0],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "ty": 180,
              "value": [112, 121, 47, 116, 114, 115, 114, 121],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [100, 0, 0, 0],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": {
            "ty": 181
          },
          "index": 4
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 182
          },
          "event": {
            "ty": 29
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [170, 42, 0, 0],
              "docs": [" The limit on the number of batched calls."]
            }
          ],
          "error": {
            "ty": 274
          },
          "index": 5
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 275
                  }
                },
                "default": [0],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 10,
                    "value": 33
                  }
                },
                "default": [0],
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "ty": 185
          },
          "event": {
            "ty": 32
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 8,
              "value": [0, 116, 59, 164, 11, 0, 0, 0],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [50, 0, 0, 0],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "error": {
            "ty": 278
          },
          "index": 6
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "entries": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "ty": {
                  "Plain": 279
                },
                "default": [0],
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 281
                  }
                },
                "default": [0],
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 282
                  }
                },
                "default": [0],
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 283
                  }
                },
                "default": [0],
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 286
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "ty": {
                  "Plain": 291
                },
                "default": [0],
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 292
                  }
                },
                "default": [0],
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 45
                  }
                },
                "default": [0],
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 293
                },
                "default": [0],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "ty": 188
          },
          "event": {
            "ty": 36
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "ty": 4,
              "value": [224, 196, 0, 0],
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "ty": 4,
              "value": [224, 196, 0, 0],
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "ty": 4,
              "value": [224, 196, 0, 0],
              "docs": [" How often (in blocks) to check for new votes."]
            },
            {
              "name": "VoteLockingPeriod",
              "ty": 4,
              "value": [224, 196, 0, 0],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "ty": 6,
              "value": [0, 0, 138, 93, 120, 69, 99, 1, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "ty": 45,
              "value": [1],
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "ty": 4,
              "value": [132, 3, 0, 0],
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "ty": 4,
              "value": [224, 196, 0, 0],
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "ty": 6,
              "value": [0, 172, 35, 252, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "ty": 4,
              "value": [100, 0, 0, 0],
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "ty": 4,
              "value": [100, 0, 0, 0],
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "error": {
            "ty": 294
          },
          "index": 7
        },
        {
          "name": "Elections",
          "storage": {
            "prefix": "Elections",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 295
                },
                "default": [0],
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "ty": {
                  "Plain": 295
                },
                "default": [0],
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 42
                },
                "default": [0],
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 297
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 190
          },
          "event": {
            "ty": 41
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 85,
              "value": [112, 104, 114, 101, 108, 101, 99, 116],
              "docs": [" Identifier for the elections-phragmen pallet's lock"]
            },
            {
              "name": "CandidacyBond",
              "ty": 6,
              "value": [
                0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0
              ],
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "ty": 6,
              "value": [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "ty": 6,
              "value": [0, 32, 61, 136, 121, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "ty": 4,
              "value": [1, 0, 0, 0],
              "docs": [" Number of members to elect."]
            },
            {
              "name": "DesiredRunnersUp",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": [" Number of runners_up to keep."]
            },
            {
              "name": "TermDuration",
              "ty": 4,
              "value": [224, 196, 0, 0],
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            }
          ],
          "error": {
            "ty": 298
          },
          "index": 8
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 299
                },
                "default": [0],
                "docs": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 184
                  }
                },
                "default": [0],
                "docs": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 300
                  }
                },
                "default": [0],
                "docs": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [0],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 192
          },
          "event": {
            "ty": 44
          },
          "constants": [],
          "error": {
            "ty": 301
          },
          "index": 9
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 302
                },
                "default": [0],
                "docs": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 184
                  }
                },
                "default": [0],
                "docs": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 300
                  }
                },
                "default": [0],
                "docs": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [0],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 193
          },
          "event": {
            "ty": 46
          },
          "constants": [],
          "error": {
            "ty": 303
          },
          "index": 10
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "VestingSchedules",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 304
                  }
                },
                "default": [0],
                "docs": [
                  " Vesting schedules of an account.",
                  "",
                  " VestingSchedules: map AccountId => Vec<VestingSchedule>"
                ]
              }
            ]
          },
          "calls": {
            "ty": 194
          },
          "event": {
            "ty": 47
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [160, 134, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            }
          ],
          "error": {
            "ty": 305
          },
          "index": 11
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 306
                  }
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 310
                  }
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" The announcements made by the proxy (key)."]
              }
            ]
          },
          "calls": {
            "ty": 196
          },
          "event": {
            "ty": 50
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "ty": 6,
              "value": [0, 192, 35, 4, 60, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "ty": 6,
              "value": [0, 88, 50, 1, 205, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "ty": 4,
              "value": [32, 0, 0, 0],
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "ty": 4,
              "value": [32, 0, 0, 0],
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "ty": 6,
              "value": [0, 192, 35, 4, 60, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "ty": 6,
              "value": [0, 176, 100, 2, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": {
            "ty": 314
          },
          "index": 12
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "entries": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 9,
                    "value": 315
                  }
                },
                "default": [0],
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 10
                  }
                },
                "default": [0],
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 198
          },
          "event": {
            "ty": 53
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "ty": 4,
              "value": [0, 4, 0, 0],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "ty": 4,
              "value": [32, 28, 0, 0],
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "ty": 316,
              "value": [1],
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "ty": 6,
              "value": [
                0, 128, 198, 164, 126, 141, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0
              ],
              "docs": [" The amount held on deposit for placing a tip report."]
            }
          ],
          "error": {
            "ty": 317
          },
          "index": 13
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 318
                },
                "default": [0],
                "docs": [" Uncles"]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [" Author of current block."]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [" Whether uncles were already set in this block."]
              }
            ]
          },
          "calls": {
            "ty": 199
          },
          "event": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "error": {
            "ty": 320
          },
          "index": 14
        },
        {
          "name": "CollatorSelection",
          "storage": {
            "prefix": "CollatorSelection",
            "entries": [
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [0],
                "docs": [" The invulnerable, fixed collators."]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 321
                },
                "default": [0],
                "docs": [" The (community, limited) collation candidates."]
              },
              {
                "name": "LastAuthoredBlock",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [0, 0, 0, 0],
                "docs": [" Last block authored by collator."]
              },
              {
                "name": "DesiredCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " Desired number of candidates.",
                  "",
                  " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
                ]
              },
              {
                "name": "CandidacyBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [
                  " Fixed amount to deposit to become a collator.",
                  "",
                  " When a collator calls `leave_intent` they immediately receive the deposit back."
                ]
              }
            ]
          },
          "calls": {
            "ty": 203
          },
          "event": {
            "ty": 54
          },
          "constants": [],
          "error": {
            "ty": 323
          },
          "index": 15
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [0],
                "docs": [" The current set of validators."]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [" Current index of the session."]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 324
                },
                "default": [0],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 178
                },
                "default": [0],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 205
                  }
                },
                "default": [0],
                "docs": [" The next session keys for a validator."]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 326,
                    "value": 0
                  }
                },
                "default": [0],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 204
          },
          "event": {
            "ty": 55
          },
          "constants": [],
          "error": {
            "ty": 328
          },
          "index": 16
        },
        {
          "name": "Aura",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 17
        },
        {
          "name": "AuraExt",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 18
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 329
                  }
                },
                "default": [0],
                "docs": [" The request status of a given hash."]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 331
                  }
                },
                "default": [0],
                "docs": [" The preimages stored by this pallet."]
              }
            ]
          },
          "calls": {
            "ty": 208
          },
          "event": {
            "ty": 56
          },
          "constants": [],
          "error": {
            "ty": 332
          },
          "index": 19
        },
        {
          "name": "Uniques",
          "storage": {
            "prefix": "Uniques",
            "entries": [
              {
                "name": "Class",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 6,
                    "value": 333
                  }
                },
                "default": [0],
                "docs": [" Details of an asset class."]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 334,
                    "value": 31
                  }
                },
                "default": [0],
                "docs": [
                  " The assets held by any given account; set out this way so that assets owned by a single",
                  " account can be enumerated."
                ]
              },
              {
                "name": "ClassAccount",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 43,
                    "value": 31
                  }
                },
                "default": [0],
                "docs": [
                  " The classes owned by any given account; set out this way so that classes owned by a single",
                  " account can be enumerated."
                ]
              },
              {
                "name": "Asset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 335,
                    "value": 336
                  }
                },
                "default": [0],
                "docs": [
                  " The assets in existence and their ownership details."
                ]
              },
              {
                "name": "ClassMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 6,
                    "value": 337
                  }
                },
                "default": [0],
                "docs": [" Metadata of an asset class."]
              },
              {
                "name": "InstanceMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 335,
                    "value": 338
                  }
                },
                "default": [0],
                "docs": [" Metadata of an asset instance."]
              },
              {
                "name": "Attribute",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 339,
                    "value": 340
                  }
                },
                "default": [0],
                "docs": [" Metadata of an asset class."]
              }
            ]
          },
          "calls": {
            "ty": 209
          },
          "event": {
            "ty": 57
          },
          "constants": [
            {
              "name": "ClassDeposit",
              "ty": 6,
              "value": [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The basic amount of funds that must be reserved for an asset class."
              ]
            },
            {
              "name": "InstanceDeposit",
              "ty": 6,
              "value": [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The basic amount of funds that must be reserved for an asset instance."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "AttributeDepositBase",
              "ty": 6,
              "value": [0, 160, 114, 78, 24, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The basic amount of funds that must be reserved when adding an attribute to an asset."
              ]
            },
            {
              "name": "DepositPerByte",
              "ty": 6,
              "value": [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " The additional funds that must be reserved for the number of bytes store in metadata,",
                " either \"normal\" metadata or attribute metadata."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [60, 0, 0, 0],
              "docs": [" The maximum length of data stored on-chain."]
            },
            {
              "name": "KeyLimit",
              "ty": 4,
              "value": [0, 1, 0, 0],
              "docs": [" The maximum length of an attribute key."]
            },
            {
              "name": "ValueLimit",
              "ty": 4,
              "value": [0, 4, 0, 0],
              "docs": [" The maximum length of an attribute value."]
            }
          ],
          "error": {
            "ty": 341
          },
          "index": 20
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [0],
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [0],
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 213
                },
                "default": [0],
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "ty": {
                  "Plain": 342
                },
                "default": [0],
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "ty": {
                  "Plain": 344
                },
                "default": [0],
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 348
                },
                "default": [0],
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "ty": {
                  "Plain": 349
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "ty": {
                  "Plain": 350
                },
                "default": [0],
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 353
                },
                "default": [0],
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 148
                },
                "default": [0],
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 148
                },
                "default": [0],
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 8
                },
                "default": [0],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 8
                },
                "default": [0],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 9
                },
                "default": [0],
                "docs": [" The next authorized upgrade, if there is one."]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [0],
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "ty": 211
          },
          "event": {
            "ty": 63
          },
          "constants": [],
          "error": {
            "ty": 355
          },
          "index": 50
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 106
                },
                "default": [100, 0, 0, 0],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 51
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" The latest available query index."]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 8,
                    "value": 356
                  }
                },
                "default": [0],
                "docs": [" The ongoing queries."]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 4
                  }
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [0],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 360,
                    "value": 4
                  }
                },
                "default": [0],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 360,
                    "value": 8
                  }
                },
                "default": [0],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 360,
                    "value": 361
                  }
                },
                "default": [0],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 362
                },
                "default": [0],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 365
                },
                "default": [0],
                "docs": [" The current migration's stage, if any."]
              }
            ]
          },
          "calls": {
            "ty": 223
          },
          "event": {
            "ty": 64
          },
          "constants": [],
          "error": {
            "ty": 366
          },
          "index": 52
        },
        {
          "name": "CumulusXcm",
          "storage": {
            "prefix": "CumulusXcm",
            "entries": []
          },
          "calls": {
            "ty": 248
          },
          "event": {
            "ty": 103
          },
          "constants": [],
          "error": {
            "ty": 367
          },
          "index": 53
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 368
                },
                "default": [0],
                "docs": [" Status of the inbound XCMP channels."]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 374,
                    "value": 10
                  }
                },
                "default": [0],
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 375
                },
                "default": [0],
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 378,
                    "value": 10
                  }
                },
                "default": [0],
                "docs": [" The messages outbound in a given XCMP channel."]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 106,
                    "value": 10
                  }
                },
                "default": [0],
                "docs": [" Any signal messages waiting to be sent."]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 379
                },
                "default": [
                  2, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 160, 134, 1, 0, 0, 0, 0,
                  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 200, 23, 168, 4, 0, 0, 0
                ],
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 8,
                    "value": 380
                  }
                },
                "default": [0],
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [0],
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 104
          },
          "constants": [],
          "error": {
            "ty": 381
          },
          "index": 54
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "entries": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "ty": {
                  "Plain": 382
                },
                "default": [0, 228, 11, 84, 2, 0, 0, 0],
                "docs": [" The configuration."]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 383
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" The page index."]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 4,
                    "value": 384
                  }
                },
                "default": [0],
                "docs": [" The queue pages."]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 8,
                    "value": 385
                  }
                },
                "default": [0],
                "docs": [" The overweight messages."]
              }
            ]
          },
          "calls": {
            "ty": 249
          },
          "event": {
            "ty": 107
          },
          "constants": [],
          "error": {
            "ty": 386
          },
          "index": 55
        },
        {
          "name": "AssetRegistry",
          "storage": {
            "prefix": "AssetRegistry",
            "entries": [
              {
                "name": "Assets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 387
                  }
                },
                "default": [0],
                "docs": [" Details of an asset."]
              },
              {
                "name": "NextAssetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " Next available asset id. This is sequential id assigned for each new registered asset."
                ]
              },
              {
                "name": "AssetIds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 109,
                    "value": 4
                  }
                },
                "default": [0],
                "docs": [" Mapping between asset name and asset id."]
              },
              {
                "name": "AssetLocations",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 111
                  }
                },
                "default": [0],
                "docs": [" Native location of an asset."]
              },
              {
                "name": "LocationAssets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 111,
                    "value": 4
                  }
                },
                "default": [0],
                "docs": [" Local asset for native location."]
              },
              {
                "name": "AssetMetadataMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 388
                  }
                },
                "default": [0],
                "docs": [" Metadata of an asset."]
              }
            ]
          },
          "calls": {
            "ty": 250
          },
          "event": {
            "ty": 108
          },
          "constants": [
            {
              "name": "NativeAssetId",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": [" Native Asset Id"]
            }
          ],
          "error": {
            "ty": 389
          },
          "index": 100
        },
        {
          "name": "XYK",
          "storage": {
            "prefix": "XYK",
            "entries": [
              {
                "name": "ShareToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [0, 0, 0, 0],
                "docs": [" Asset id storage for shared pool tokens"]
              },
              {
                "name": "TotalLiquidity",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 6
                  }
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" Total liquidity in a pool."]
              },
              {
                "name": "PoolAssets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 33
                  }
                },
                "default": [0],
                "docs": [" Asset pair in a pool."]
              }
            ]
          },
          "calls": {
            "ty": 251
          },
          "event": {
            "ty": 112
          },
          "constants": [
            {
              "name": "NativeAssetId",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": [" Native Asset Id"]
            },
            {
              "name": "GetExchangeFee",
              "ty": 33,
              "value": [2, 0, 0, 0, 232, 3, 0, 0],
              "docs": [" Trading fee rate"]
            },
            {
              "name": "MinTradingLimit",
              "ty": 6,
              "value": [232, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Minimum trading limit"]
            },
            {
              "name": "MinPoolLiquidity",
              "ty": 6,
              "value": [232, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Minimum pool liquidity"]
            },
            {
              "name": "MaxInRatio",
              "ty": 6,
              "value": [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Max fraction of pool to sell in single transaction"]
            },
            {
              "name": "MaxOutRatio",
              "ty": 6,
              "value": [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Max fraction of pool to buy in single transaction"]
            }
          ],
          "error": {
            "ty": 390
          },
          "index": 101
        },
        {
          "name": "Duster",
          "storage": {
            "prefix": "Duster",
            "entries": [
              {
                "name": "AccountBlacklist",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 31
                  }
                },
                "default": [0],
                "docs": [" Accounts excluded from dusting."]
              },
              {
                "name": "RewardAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [" Account to take reward from."]
              },
              {
                "name": "DustAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [" Account to send dust to."]
              }
            ]
          },
          "calls": {
            "ty": 252
          },
          "event": {
            "ty": 113
          },
          "constants": [
            {
              "name": "Reward",
              "ty": 6,
              "value": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Reward amount"]
            },
            {
              "name": "NativeCurrencyId",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": [" Native Asset Id"]
            }
          ],
          "error": {
            "ty": 391
          },
          "index": 102
        },
        {
          "name": "Exchange",
          "storage": {
            "prefix": "Exchange",
            "entries": [
              {
                "name": "ExchangeAssetsIntentionCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 33,
                    "value": 4
                  }
                },
                "default": [0, 0, 0, 0],
                "docs": [" Intention count for current block"]
              },
              {
                "name": "ExchangeAssetsIntentions",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 33,
                    "value": 392
                  }
                },
                "default": [0],
                "docs": [
                  " Registered intentions for current block",
                  " Stored as ( asset_a, asset_b ) combination where asset_a is meant to be exchanged for asset_b ( asset_a < asset_b)"
                ]
              }
            ]
          },
          "calls": {
            "ty": 253
          },
          "event": {
            "ty": 114
          },
          "constants": [
            {
              "name": "max_out_ratio",
              "ty": 6,
              "value": [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": []
            }
          ],
          "error": {
            "ty": 394
          },
          "index": 103
        },
        {
          "name": "LBP",
          "storage": {
            "prefix": "LBP",
            "entries": [
              {
                "name": "PoolData",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 118
                  }
                },
                "default": [0],
                "docs": [" Details of a pool."]
              },
              {
                "name": "FeeCollectorWithAsset",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 395,
                    "value": 45
                  }
                },
                "default": [0],
                "docs": [
                  " Storage used for tracking existing fee collectors",
                  " Not more than one fee collector per asset possible"
                ]
              }
            ]
          },
          "calls": {
            "ty": 254
          },
          "event": {
            "ty": 117
          },
          "constants": [
            {
              "name": "MinTradingLimit",
              "ty": 6,
              "value": [232, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " Minimum trading limit, sole purpose of this is to keep the math working"
              ]
            },
            {
              "name": "MinPoolLiquidity",
              "ty": 6,
              "value": [232, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " Minimum pool liquidity, sole purpose of this is to keep the math working"
              ]
            },
            {
              "name": "MaxInRatio",
              "ty": 6,
              "value": [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Max fraction of pool to sell in single transaction"]
            },
            {
              "name": "MaxOutRatio",
              "ty": 6,
              "value": [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [" Max fraction of pool to buy in single transaction"]
            },
            {
              "name": "repay_fee",
              "ty": 33,
              "value": [2, 0, 0, 0, 10, 0, 0, 0],
              "docs": []
            }
          ],
          "error": {
            "ty": 396
          },
          "index": 104
        },
        {
          "name": "NFT",
          "storage": {
            "prefix": "NFT",
            "entries": [
              {
                "name": "Classes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 6,
                    "value": 397
                  }
                },
                "default": [0],
                "docs": [" Stores class info"]
              },
              {
                "name": "Instances",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 335,
                    "value": 398
                  }
                },
                "default": [0],
                "docs": [" Stores instance info"]
              }
            ]
          },
          "calls": {
            "ty": 256
          },
          "event": {
            "ty": 121
          },
          "constants": [
            {
              "name": "ReserveClassIdUpTo",
              "ty": 6,
              "value": [63, 66, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              "docs": [
                " Class IDs reserved for runtime up to the following constant"
              ]
            }
          ],
          "error": {
            "ty": 399
          },
          "index": 105
        },
        {
          "name": "LiquidityMining",
          "storage": {
            "prefix": "LiquidityMining",
            "entries": [
              {
                "name": "PoolIdSequencer",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " Id sequencer for `GlobalPool` and `LiquidityPoolYieldFarm`."
                ]
              },
              {
                "name": "NftInstanceSequencer",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" Sequencer for nft part of nft id."]
              },
              {
                "name": "GlobalPoolData",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 400
                  }
                },
                "default": [0],
                "docs": [" Global pool details."]
              },
              {
                "name": "LiquidityPoolData",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 402,
                    "value": 403
                  }
                },
                "default": [0],
                "docs": [" Liquidity pool yield farm details."]
              },
              {
                "name": "DepositData",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 6,
                    "value": 404
                  }
                },
                "default": [0],
                "docs": [" Deposit details."]
              },
              {
                "name": "LiquidityPoolMetadata",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 405
                  }
                },
                "default": [0],
                "docs": [
                  " `LiquidityPoolYieldFarm` metadata holding: `(asset pair, existing nfts count, global pool id)`"
                ]
              }
            ]
          },
          "calls": {
            "ty": 257
          },
          "event": {
            "ty": 123
          },
          "constants": [],
          "error": {
            "ty": 406
          },
          "index": 156
        },
        {
          "name": "MultiTransactionPayment",
          "storage": {
            "prefix": "MultiTransactionPayment",
            "entries": [
              {
                "name": "AccountCurrencyMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [0],
                "docs": [" Account currency map"]
              },
              {
                "name": "AcceptedCurrencies",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 125
                  }
                },
                "default": [0],
                "docs": [
                  " Curated list of currencies which fees can be paid with"
                ]
              },
              {
                "name": "AcceptedCurrencyPrice",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 125
                  }
                },
                "default": [0],
                "docs": [" Block storage for accepted currency price"]
              },
              {
                "name": "FallbackAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [" Account to use when pool does not exist."]
              }
            ]
          },
          "calls": {
            "ty": 258
          },
          "event": {
            "ty": 128
          },
          "constants": [
            {
              "name": "WithdrawFeeForSetCurrency",
              "ty": 21,
              "value": [0],
              "docs": [" Should fee be paid for setting a currency"]
            },
            {
              "name": "NativeAssetId",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": [" Native Asset"]
            }
          ],
          "error": {
            "ty": 407
          },
          "index": 106
        },
        {
          "name": "PriceOracle",
          "storage": {
            "prefix": "PriceOracle",
            "entries": [
              {
                "name": "TrackedAssetsCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [0, 0, 0, 0],
                "docs": [
                  " The number of assets registered and handled by this pallet."
                ]
              },
              {
                "name": "NewAssets",
                "modifier": "Default",
                "ty": {
                  "Plain": 148
                },
                "default": [0],
                "docs": [
                  " Sorted array of newly registered assets.",
                  " All assets are processed and removed from the storage at the end of a block.",
                  " Trades start to be processed from the next block.",
                  " All trades in the same block as the asset registration are ignored."
                ]
              },
              {
                "name": "PriceDataAccumulator",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 10,
                    "value": 408
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0
                ],
                "docs": [
                  " Processed or partially processed data generated by trades.",
                  " Data generated by trades are processed sequentially.",
                  " Each new entry is combined with the previous value to produce new intermediate value.",
                  " The last entry creates the resulting average price and volume."
                ]
              },
              {
                "name": "PriceDataTen",
                "modifier": "Default",
                "ty": {
                  "Plain": 409
                },
                "default": [0],
                "docs": [
                  " The last ten average values corresponding to the last ten blocks."
                ]
              },
              {
                "name": "PriceDataHundred",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 10,
                    "value": 411
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 9, 0, 0, 0
                ],
                "docs": [
                  " The last ten average values corresponding to the last hundred blocks.",
                  " Each average value corresponds to an interval of length ten blocks."
                ]
              },
              {
                "name": "PriceDataThousand",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 10,
                    "value": 411
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 9, 0, 0, 0
                ],
                "docs": [
                  " The last ten average values corresponding to the last thousand blocks.",
                  " Each average value corresponds to an interval of length hundred blocks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 259
          },
          "event": {
            "ty": 129
          },
          "constants": [],
          "error": {
            "ty": 414
          },
          "index": 107
        },
        {
          "name": "RelayChainInfo",
          "storage": null,
          "calls": null,
          "event": {
            "ty": 130
          },
          "constants": [],
          "error": {
            "ty": 415
          },
          "index": 108
        },
        {
          "name": "Currencies",
          "storage": null,
          "calls": {
            "ty": 260
          },
          "event": {
            "ty": 131
          },
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 4,
              "value": [0, 0, 0, 0],
              "docs": []
            }
          ],
          "error": {
            "ty": 416
          },
          "index": 150
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [" The total issuance of a token type."]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 395,
                    "value": 417
                  }
                },
                "default": [0],
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 395,
                    "value": 420
                  }
                },
                "default": [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0
                ],
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 261
          },
          "event": {
            "ty": 133
          },
          "constants": [
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [50, 0, 0, 0],
              "docs": []
            }
          ],
          "error": {
            "ty": 421
          },
          "index": 151
        },
        {
          "name": "OrmlXcm",
          "storage": null,
          "calls": {
            "ty": 262
          },
          "event": {
            "ty": 134
          },
          "constants": [],
          "error": {
            "ty": 422
          },
          "index": 153
        },
        {
          "name": "XTokens",
          "storage": {
            "prefix": "XTokens",
            "entries": []
          },
          "calls": {
            "ty": 263
          },
          "event": {
            "ty": 135
          },
          "constants": [
            {
              "name": "SelfLocation",
              "ty": 67,
              "value": [1, 1, 0, 169, 32],
              "docs": [" Self chain location."]
            },
            {
              "name": "BaseXcmWeight",
              "ty": 8,
              "value": [0, 225, 245, 5, 0, 0, 0, 0],
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "error": {
            "ty": 423
          },
          "index": 154
        },
        {
          "name": "UnknownTokens",
          "storage": {
            "prefix": "UnknownTokens",
            "entries": [
              {
                "name": "ConcreteFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 424,
                    "value": 6
                  }
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [
                  " Concrete fungible balances under a given location and a concrete",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              },
              {
                "name": "AbstractFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 425,
                    "value": 6
                  }
                },
                "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "docs": [
                  " Abstract fungible balances under a given location and a abstract",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 136
          },
          "constants": [],
          "error": {
            "ty": 426
          },
          "index": 155
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [0],
                "docs": [" The `AccountId` of the sudo key."]
              }
            ]
          },
          "calls": {
            "ty": 266
          },
          "event": {
            "ty": 137
          },
          "constants": [],
          "error": {
            "ty": 427
          },
          "index": 255
        }
      ],
      "extrinsic": {
        "ty": 428,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckSpecVersion",
            "ty": 436,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 437,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 438,
            "additional_signed": 9
          },
          {
            "identifier": "CheckMortality",
            "ty": 439,
            "additional_signed": 9
          },
          {
            "identifier": "CheckNonce",
            "ty": 441,
            "additional_signed": 31
          },
          {
            "identifier": "CheckWeight",
            "ty": 442,
            "additional_signed": 31
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 443,
            "additional_signed": 31
          },
          {
            "identifier": "CurrencyBalanceCheck",
            "ty": 444,
            "additional_signed": 31
          }
        ]
      },
      "ty": 401
    }
  }
]
